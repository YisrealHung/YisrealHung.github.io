// 7697 5G Wi-Fi
Blockly.Arduino.linkit_wifi_5G={};
Blockly.Arduino.linkit_wifi_5G_wait_until_ready=function(){
	var a=Blockly.Arduino.valueToCode(this,"SSID",Blockly.Arduino.ORDER_ATOMIC)||"",b=Blockly.Arduino.valueToCode(this,"PASSWORD",Blockly.Arduino.ORDER_ATOMIC)||"";
	//a=a.replace(/"/g,"");b=b.replace(/"/g,"");
	Blockly.Arduino.definitions_.define_linkit_wifi_include="#include <LWiFi.h>";Blockly.Arduino.definitions_.define_linkit_wifi_ssid='char _lwifi_ssid[] = '+a+';';Blockly.Arduino.definitions_.define_linkit_wifi_pass='char _lwifi_pass[] = '+b+';';
	return"while (WiFi.begin_5G(_lwifi_ssid, _lwifi_pass) != WL_CONNECTED) { delay(1000); }\n"
};
// mooncar
Blockly.Arduino.mooncar={};
Blockly.Arduino.mooncar_move_car=function(){
  var a=this.getFieldValue("STAT"),
      b=Blockly.Arduino.valueToCode(this,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"0";

  if (Blockly.Arduino.my_board_type=="7697"){
    var m1A = 17;
    var m1B = 12;
    var m2A = 16;
    var m2B = 13;
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var m1A = 8;
    var m1B = 16;
    var m2A = 28;
    var m2B = 18;
    var fl = 20;
  }

  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";

  
  Blockly.Arduino.setups_["setup_mooncar_"]="pinMode("+m1A+", OUTPUT);\n  pinMode("+m1B+", OUTPUT);\n  pinMode("+m2A+", OUTPUT);\n  pinMode("+m2B+", OUTPUT);\n";

  if (a == "FORWARD") {
    return"analogWrite("+m1A+", "+b+");\nanalogWrite("+m1B+", 0);\nanalogWrite("+m2A+", "+b+");\nanalogWrite("+m2B+", 0);\n"
  } else if (a == "BACKWARD"){
    return"analogWrite("+m1A+", 0);\nanalogWrite("+m1B+", "+b+");\nanalogWrite("+m2A+", 0);\nanalogWrite("+m2B+", "+b+");\n"
  } else if (a == "LEFT") {
    return"analogWrite("+m1A+", 0);\nanalogWrite("+m1B+", "+b+");\nanalogWrite("+m2A+", "+b+");\nanalogWrite("+m2B+", 0);\n"
  } else if (a == "RIGHT") {
    return"analogWrite("+m1A+", "+b+");\nanalogWrite("+m1B+", 0);\nanalogWrite("+m2A+", 0);\nanalogWrite("+m2B+", "+b+");\n"
  } else {
    return"analogWrite("+m1A+", 0);\nanalogWrite("+m1B+", 0);\nanalogWrite("+m2A+", 0);\nanalogWrite("+m2B+", 0);\n"
  }
};
Blockly.Arduino.mooncar_move_motor=function(){
  var a=Blockly.Arduino.valueToCode(this,"SPEED_L",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"SPEED_R",Blockly.Arduino.ORDER_ATOMIC)||"0";

  if (Blockly.Arduino.my_board_type=="7697"){
    var m1A = 17;
    var m1B = 12;
    var m2A = 16;
    var m2B = 13;
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var m1A = 8;
    var m1B = 16;
    var m2A = 28;
    var m2B = 18;
    var fl = 20;
  }
  
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";

  Blockly.Arduino.definitions_.define_move_motor="void motor_LR(int ML, int MR)\n{\n  if (ML > 0) {\n    analogWrite("+m1A+", ML);\n    analogWrite("+m1B+", 0);\n  }else {\n    analogWrite("+m1A+", 0);\n    analogWrite("+m1B+", ML*(-1));\n  }\n  if (MR > 0) {\n    analogWrite("+m2A+", MR);\n    analogWrite("+m2B+", 0);\n  }else {\n    analogWrite("+m2A+", 0);\n    analogWrite("+m2B+", MR*(-1));\n  }\n}\n";
  Blockly.Arduino.setups_["setup_mooncar_"]="pinMode("+m1A+", OUTPUT);\n  pinMode("+m1B+", OUTPUT);\n  pinMode("+m2A+", OUTPUT);\n  pinMode("+m2B+", OUTPUT);\n";
  return"motor_LR("+a+", "+b+");\n";
};
Blockly.Arduino.mooncar_tracker=function(){
  if (Blockly.Arduino.my_board_type=="7697"){
    var lsA = 11;
    var lsB = 10;
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var lsA = 19;
    var lsB = 17;
    var fl = 20;
  }
  
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";
  Blockly.Arduino.definitions_.define_tracker="int tracker()\n{\n  if (digitalRead("+lsB+") == 1 && digitalRead("+lsA+") == 1) {\n    return 0;\n  } else if (digitalRead("+lsB+") == 0 && digitalRead("+lsA+") == 1) {\n    return 1;\n  } else if (digitalRead("+lsB+") == 1 && digitalRead("+lsA+") == 0){\n    return 2;\n  } else {\n    return 3;\n  }\n}\n";
  Blockly.Arduino.setups_["setup_tracker_"]="pinMode("+lsB+", INPUT);\n  pinMode("+lsA+", INPUT);\n";
  return["tracker()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_sonar=function(){
  if (Blockly.Arduino.my_board_type=="7697"){
    var tr = 2;
    var ec = 5;
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var tr = 0;
    var ec = 9;
    var fl = 20;
  }
  
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";
  Blockly.Arduino.definitions_['define_sonar_']="#include <Ultrasonic.h>\n";
  Blockly.Arduino.definitions_['define_sonar_set']="Ultrasonic ultrasonic_("+tr+", "+ec+");"
  return ["ultrasonic_.convert(ultrasonic_.timing(), Ultrasonic::CM)", Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_button=function(){
  var a=this.getFieldValue("AB_BUTTON");
  if (Blockly.Arduino.my_board_type=="7697"){
    var btA = 0;
    var btB = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var btA = 2;
    var btB = 20;
  }
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+btB+", OUTPUT);\ndigitalWrite("+btB+", HIGH);\n";
  Blockly.Arduino.setups_["setup_botton_"]="pinMode("+btA+", INPUT_PULLUP);\n  pinMode("+btB+", INPUT_PULLUP);\n";
  Blockly.Arduino.definitions_.define_button_a="bool a_button()\n{\n  if (digitalRead("+btA+") == 0 && digitalRead("+btB+") == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_b="bool b_button()\n{\n  if (digitalRead("+btA+") == 1 && digitalRead("+btB+") == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_c="bool c_button()\n{\n  if (digitalRead("+btA+") == 0 && digitalRead("+btB+") == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";

  if (a == "A_") {
    return["a_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "B_") {
    return["b_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["c_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.mooncar_init_tcs=function(){
  var a=Blockly.Arduino.valueToCode(this,"RANGE",Blockly.Arduino.ORDER_ATOMIC)||"5";
  if (Blockly.Arduino.my_board_type=="7697"){
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var fl = 20;
  }
  Blockly.Arduino.definitions_.define_write="#include <Wire.h>";
  Blockly.Arduino.definitions_.define_tcs="#include \"Adafruit_TCS34725.h\"";
  Blockly.Arduino.definitions_.define_tcs_var="int now[3], rec_r[3], rec_g[3], rec_b[3], rec_y[3], rec_a[3], rec_p[3], rec_c1[3], rec_c2[3], rec_c3[3], range_ = "+a+";";
  Blockly.Arduino.definitions_["define_class_tcs_"]="Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);";
  Blockly.Arduino.definitions_["define_class_tcs_init"]="uint16_t r_, g_, b_, c_;";
  Blockly.Arduino.definitions_.define_tcs_red="int tcs_read_red()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return r_;\n}\n";
  Blockly.Arduino.definitions_.define_tcs_green="int tcs_read_green()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return g_;\n}\n";
  Blockly.Arduino.definitions_.define_tcs_blue="int tcs_read_blue()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return b_;\n}\n";
  Blockly.Arduino.setups_["tcs_"]||(Blockly.Arduino.setups_["tcs_"]="tcs.begin();\n");
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n";
  return"digitalWrite("+fl+", LOW);\n";
};
Blockly.Arduino.mooncar_read_tcs=function(){
  var a=this.getFieldValue("TCS");
  if (a == "RED") {
    return["tcs_read_red()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "GREEN") {
    return["tcs_read_green()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["tcs_read_blue()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.mooncar_flash_light=function(){
  var a=this.getFieldValue("TCS_LIGHT");
  if (Blockly.Arduino.my_board_type=="7697"){
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var fl = 20;
  }
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n";
  if (a == "ON") {
    return"digitalWrite("+fl+", LOW);\n";
  }
  else {
    return"digitalWrite("+fl+", HIGH);\n";
  }
};
Blockly.Arduino.mooncar_record_tcs=function(){
  var a=this.getFieldValue("RECORD_TCS");
  if (a == "RED") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_r[0] = r_;\nrec_r[1] = g_;\nrec_r[2] = b_;\n";
  }
  else if (a == "GREEN") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_g[0] = r_;\nrec_g[1] = g_;\nrec_g[2] = b_;\n";
  }
  else if (a == "BLUE") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_b[0] = r_;\nrec_b[1] = g_;\nrec_b[2] = b_;\n";
  }
  else if (a == "YELLO") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_y[0] = r_;\nrec_y[1] = g_;\nrec_y[2] = b_;\n";
  }
  else if (a == "AZURE") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_a[0] = r_;\nrec_a[1] = g_;\nrec_a[2] = b_;\n";
  }
  else if (a == "PURPLE") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_p[0] = r_;\nrec_p[1] = g_;\nrec_p[2] = b_;\n";
  }
  else if (a == "C1") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c1[0] = r_;\nrec_c1[1] = g_;\nrec_c1[2] = b_;\n";
  }
  else if (a == "C2") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c2[0] = r_;\nrec_c2[1] = g_;\nrec_c2[2] = b_;\n";
  }
  else {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c3[0] = r_;\nrec_c3[1] = g_;\nrec_c3[2] = b_;\n";
  }
};
Blockly.Arduino.mooncar_chack_tcs=function(){
  var a=this.getFieldValue("RECORD_TCS");
  if (a == "RED") {
    Blockly.Arduino.definitions_.define_color_1="int tcs_check_1()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_r[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_1()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "GREEN") {
    Blockly.Arduino.definitions_.define_color_2="int tcs_check_2()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_g[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_2()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "BLUE") {
    Blockly.Arduino.definitions_.define_color_3="int tcs_check_3()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_b[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_3()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YELLO") {
    Blockly.Arduino.definitions_.define_color_4="int tcs_check_4()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_y[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_4()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "AZURE") {
    Blockly.Arduino.definitions_.define_color_5="int tcs_check_5()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_a[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_5()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PURPLE") {
    Blockly.Arduino.definitions_.define_color_6="int tcs_check_6()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_p[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_6()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "C1") {
    Blockly.Arduino.definitions_.define_color_7="int tcs_check_7()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c1[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_7()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "C2") {
    Blockly.Arduino.definitions_.define_color_8="int tcs_check_8()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c2[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_8()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    Blockly.Arduino.definitions_.define_color_9="int tcs_check_9()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c3[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_9()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.mooncar_ir_remote_read=function(){
  Blockly.Arduino.definitions_.define_irread="decode_results results;\nString myCodeType;\nString myIRcode;\n";
  if (Blockly.Arduino.my_board_type=="7697"){
    Blockly.Arduino.definitions_.define_irrpins="#define MY_IR_RECEIVE_PIN 15\n";
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    Blockly.Arduino.definitions_.define_irrpins="#define MY_IR_RECEIVE_PIN 27\n";
    var fl = 20;
  }
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";
  Blockly.Arduino.setups_["irremote_"]||(Blockly.Arduino.setups_["irremote_"]="IrReceiver.begin(MY_IR_RECEIVE_PIN);\n");
  return"if (IrReceiver.decode(&results)) {\n  "+Blockly.Arduino.statementToCode(this,"IR_READ")+"\n  IrReceiver.resume();\n}\n";
};
Blockly.Arduino.mooncar_ir_remote_read_value=function(){
  Blockly.Arduino.definitions_.define_irremote1="#include <IRremote.hpp>\n";
  return["String(results.value, HEX)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_ir_remote_read_type=function(){
  Blockly.Arduino.definitions_.define_irremote1="#include <IRremote.hpp>\n";
  Blockly.Arduino.definitions_.define_ir_type="String ir_type(int tip)\n{\n  if (tip == 14) {\n    return\"RC5\";\n  } else if (tip == 15){\n    return\"RC6\";\n  } else if (tip == 7){\n    return\"NEC\";\n  } else if (tip == 18){\n    return\"Sony\";\n  } else if (tip == 8){\n    return\"Panasonic\";\n  } else if (tip == 4){\n    return\"JVC\";\n  } else if (tip == 16){\n    return\"Samsung\";\n  } else if (tip == 5){\n    return\"LG\";\n  } else if (tip == 3){\n    return\"Sharp\";\n  }else {\n    return\"None\";\n  }\n}\n";
  return["ir_type(results.decode_type)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_ir_remote_send=function(){
  var a=this.getFieldValue("IR_TYPE"),
      b=Blockly.Arduino.valueToCode(this,"IR_SEND",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_irsend="#define NO_LED_FEEDBACK_CODE\n#include <PinDefinitionsAndMore.h>\n";
  if (Blockly.Arduino.my_board_type=="7697"){
    Blockly.Arduino.definitions_.define_irspins="#define IR_SEND_PIN 3\n";
    var fl = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    Blockly.Arduino.definitions_.define_irspins="#define IR_SEND_PIN 6\n";
    var fl = 20;
  }
  Blockly.Arduino.definitions_.define_irremote2="#include <IRremote.hpp>\n";
  delete Blockly.Arduino.definitions_.define_irremote1;
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";
  Blockly.Arduino.setups_.setup_irremote="IrSender.begin();\n";
  Blockly.Arduino.definitions_.define_ir_x2i="int x2i(char *s)\n{\n  int x = 0;\n  for(;;) {\n    char c = *s;\n    if (c >= '0' && c <= '9') {\n      x *= 16;\n      x += c - '0';\n    }    else if (c >= 'a' && c <= 'f') {\n      x *= 16;\n      x += (c - 'a') + 10;\n    }\n    else break;\n    s++;\n  }\n  return x;\n}";
  if (a == "NEC") {
    return"IrSender.sendNEC(x2i("+b+"), 32);\n"
  } else if (a == "SONY"){
    return"IrSender.sendSony(x2i("+b+"), 12);\n"
  } else if (a == "RC5") {
    return"IrSender.sendRC5(x2i("+b+"), 12);\n"
  } else {
    return"IrSender.sendRC6(x2i("+b+"), 20);\n"
  }
};
Blockly.Arduino.mooncar_face_show=function(){
  var a=this.getFieldValue("FACE_SHOW");
  //Blockly.Arduino.definitions_.define_irremote="#include <U8g2lib.h>";
  //Blockly.Arduino.definitions_.define_irremote_init="U8G2_SSD1306_128X64_NONAME_F_HW_I2C  u8g2(U8G2_R0 , 2);";
  //Blockly.Arduino.setups_["face_"]||(Blockly.Arduino.setups_["face_"]="u8g2.begin();");
  if (a == "F1") {
    Blockly.Arduino.definitions_.define_face_f1="const unsigned char F1[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F1);\nu8g2.sendBuffer();\n";
  } else if (a == "F2"){
    Blockly.Arduino.definitions_.define_face_f2="const unsigned char F2[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0x00,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F2);\nu8g2.sendBuffer();\n";
  } else if (a == "F3"){
    Blockly.Arduino.definitions_.define_face_f3="const unsigned char F3[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0x00,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F3);\nu8g2.sendBuffer();\n";
  } else if (a == "F4"){
    Blockly.Arduino.definitions_.define_face_f4="const unsigned char F4[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x80,0x7f,0x00,0x00,0xe0,0x1f,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0xc0,0x3f,0x00,0x00,0xfc,0xff,0x07,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0xc0,0x07,0x00,0x80,0xff,0xff,0xff,0x1f,0x00,0xe0,0x00,0xc0,0x3f,0x00,0x00,0x00,0x80,0x03,0x00,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xe0,0xff,0xff,0xff,0xff,0x01,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0xf8,0xff,0xff,0xff,0x01,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x80,0xff,0xff,0xff,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F4);\nu8g2.sendBuffer();\n";
  } else if (a == "F5"){
    Blockly.Arduino.definitions_.define_face_f5="const unsigned char F5[] U8X8_PROGMEM= {0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0xe0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0x00,0x00,0x00,0x00,0xfc,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,0x00,0x00,0xc0,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x1f,0x00,0x00,0x00,0x00,0xf0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0x00,0x00,0x00,0x00,0xfe,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x01,0x00,0x00,0x00,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xfd,0x03,0x00,0x00,0x00,0x7f,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xf9,0x03,0x00,0x00,0x00,0x3f,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xe3,0x03,0x00,0x00,0x00,0x0e,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xc3,0x01,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F5);\nu8g2.sendBuffer();\n";
  } else if (a == "F6"){
    Blockly.Arduino.definitions_.define_face_f6="const unsigned char F6[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x07,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x01,0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x7f,0x00,0x00,0x00,0x00,0xf8,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x3f,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xfe,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x01,0x00,0x00,0x00,0xfc,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x01,0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F6);\nu8g2.sendBuffer();\n";
  } else if (a == "F7"){
    Blockly.Arduino.definitions_.define_face_f7="const unsigned char F7[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xfc,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xfc,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F7);\nu8g2.sendBuffer();\n";
  } else if (a == "F8"){
    Blockly.Arduino.definitions_.define_face_f8="const unsigned char F8[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0xf0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0xfe,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x3e,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x3e,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x3f,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x1f,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x80,0x1f,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x80,0x0f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x80,0x0f,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xc0,0x0f,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xc0,0x07,0xf0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xe0,0x07,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xe0,0x03,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xf0,0x03,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xf0,0x01,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xf0,0x01,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0xe0,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0xfe,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x01,0x00,0xc0,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0xf8,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x81,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F8);\nu8g2.sendBuffer();\n";
  } else {
    Blockly.Arduino.definitions_.define_face_f9="const unsigned char F9[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0xfe,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0xfc,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0xc0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xe7,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x00,0xf8,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x1f,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x01,0x00,0x00,0xfc,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F9);\nu8g2.sendBuffer();\n";
  }
};
Blockly.Arduino.mooncar_neopixel_begin=function(){
  var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a < 0) {
    a = 0;
  }
  if (a > 255) {
    a = 255;
  }
  Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
  if (Blockly.Arduino.my_board_type=="7697"){
    var fl = 7;
    Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(8, 4,NEO_GRB + NEO_KHZ800);\n";
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var fl = 20;
    Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(8, 21,NEO_GRB + NEO_KHZ800);\n";
  }
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode("+fl+", OUTPUT);\n  digitalWrite("+fl+", HIGH);\n";
  Blockly.Arduino.setups_.setup_neopixel_begin="pixels.begin();\n";
  Blockly.Arduino.setups_.setup_neopixel_brightness="pixels.setBrightness("+a+");\n";
  return""
};


// EZ Start Kit
Blockly.Arduino.ez_start_kit={};
Blockly.Arduino.ez_start_kit_button=function(){
  var a=this.getFieldValue("AB_BUTTON");

  if (Blockly.Arduino.my_board_type=="7697"){
    var btA = 0;
    var btB = 7;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var btA = 2;
    var btB = 20;
  } else if (Blockly.Arduino.my_board_type=="ESP32"){
    var btA = 5;
    var btB = 36;
  }

  Blockly.Arduino.setups_["setup_botton_"]="pinMode("+btA+", INPUT_PULLUP);\n  pinMode("+btB+", INPUT_PULLUP);\n";
  Blockly.Arduino.definitions_.define_button_a="bool a_button()\n{\n  if (digitalRead("+btA+") == 0 && digitalRead("+btB+") == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_b="bool b_button()\n{\n  if (digitalRead("+btA+") == 1 && digitalRead("+btB+") == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_c="bool c_button()\n{\n  if (digitalRead("+btA+") == 0 && digitalRead("+btB+") == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  if (a == "A_") {
    return["a_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "B_") {
    return["b_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["c_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.ez_start_kit_vr=function(){
  if (Blockly.Arduino.my_board_type=="7697"){
    var vr_pins = "A2";
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var vr_pins = 28;
  } else if (Blockly.Arduino.my_board_type=="ESP32"){
    var vr_pins = 34;
  }

  Blockly.Arduino.definitions_.define_vr="int vr_value()\n{\n  return analogRead("+vr_pins+");\n}\n";
  Blockly.Arduino.setups_["setup_vr_"]="pinMode("+vr_pins+", INPUT);\n";
  return["vr_value()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_phr=function(){
  if (Blockly.Arduino.my_board_type=="7697"){
    var phr_pins = "A1";
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var phr_pins = 27;
  } else if (Blockly.Arduino.my_board_type=="ESP32"){
    var phr_pins = 39;
  }

  Blockly.Arduino.definitions_.define_phr="int phr_value()\n{\n  return analogRead("+phr_pins+");\n}\n";
  Blockly.Arduino.setups_["setup_phr_"]="pinMode("+phr_pins+", INPUT);\n";
  return["phr_value()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_dht=function(){
  var a=this.getFieldValue("EZ_DHT");
  if (Blockly.Arduino.my_board_type=="7697"){
    var dht_pins = 10;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var dht_pins = 17;
  } else if (Blockly.Arduino.my_board_type=="ESP32"){
    var dht_pins = 15;
  }

  Blockly.Arduino.definitions_['define_dht_']="#include <DHT.h>\n";
  Blockly.Arduino.definitions_['define_dht_set']="DHT dht11_p10("+dht_pins+", DHT11);\n";
  Blockly.Arduino.setups_["setup_dht_"]="dht11_p10.begin();\n";
  if (a == "ez_t") {
    return["dht11_p10.readTemperature()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["dht11_p10.readHumidity()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.ez_start_kit_relay=function(){
  var a=this.getFieldValue("EZ_RELAY");
  Blockly.Arduino.setups_["setup_relaay_"]="pinMode(5, OUTPUT);\n";
  if (a == "ON") {
    return"digitalWrite(5, HIGH);\n";
  }
  else {
    return"digitalWrite(5, LOW);\n";
  }
};
Blockly.Arduino.ez_start_kit_remote_read=function(){
  Blockly.Arduino.definitions_.define_irremote="#include <IRremote.hpp>\ndecode_results results;\nString myCodeType;\nString myIRcode;\n";
  if (Blockly.Arduino.my_board_type=="7697"){
    Blockly.Arduino.definitions_.define_irrpins="#define MY_IR_RECEIVE_PIN 15\n";
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    Blockly.Arduino.definitions_.define_irrpins="#define MY_IR_RECEIVE_PIN 27\n";
  }
  Blockly.Arduino.setups_["irremote_"]||(Blockly.Arduino.setups_["irremote_"]="IrReceiver.begin(MY_IR_RECEIVE_PIN);\n");
  return"if (IrReceiver.decode(&results)) {\n  "+Blockly.Arduino.statementToCode(this,"IR_READ")+"\n  IrReceiver.resume();\n}\n";
};
Blockly.Arduino.ez_start_kit_ir_remote_read_value=function(){
  return["String(results.value, HEX)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_ir_remote_read_type=function(){
  Blockly.Arduino.definitions_.define_ir_type="String ir_type(int tip)\n{\n  if (tip == 14) {\n    return\"RC5\";\n  } else if (tip == 15){\n    return\"RC6\";\n  } else if (tip == 7){\n    return\"NEC\";\n  } else if (tip == 18){\n    return\"Sony\";\n  } else if (tip == 8){\n    return\"Panasonic\";\n  } else if (tip == 4){\n    return\"JVC\";\n  } else if (tip == 16){\n    return\"Samsung\";\n  } else if (tip == 5){\n    return\"LG\";\n  } else if (tip == 3){\n    return\"Sharp\";\n  }else {\n    return\"None\";\n  }\n}\n";
  return["ir_type(results.decode_type)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_custom_tone=function(){
  var a=Blockly.Arduino.valueToCode(this,"FREQ",Blockly.Arduino.ORDER_ATOMIC)||0,
      b=Blockly.Arduino.valueToCode(this,"DURATION",Blockly.Arduino.ORDER_ATOMIC)||0;

  if (Blockly.Arduino.my_board_type=="7697"){
    var tpins = 14;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var tpins = 26;
  }
  return"tone("+tpins+", "+a+", "+b+");\n"
};
Blockly.Arduino.ez_start_kit_tone=function(){
  var a=this.getFieldValue("FREQ");
  if (Blockly.Arduino.my_board_type=="7697"){
    var tpins = 14;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var tpins = 26;
  }
  return"tone("+tpins+", "+a+");\n"
};
Blockly.Arduino.ez_start_kit_no_tone=function(){
  if (Blockly.Arduino.my_board_type=="7697"){
    var tpins = 14;
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    var tpins = 26;
  }
  return"noTone("+tpins+");\n"
};

Blockly.Arduino.ez_start_kit_led=function(){
  var a=this.getFieldValue("EZ_LED"),
      b=Blockly.Arduino.valueToCode(this,"LVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (b < 0) {
    b = 0;
  }
  if (b > 255) {
    b = 255;
  }
  if (a == "red") {
    Blockly.Arduino.setups_["setup_red_"]="pinMode(13, OUTPUT);\n";
    return"analogWrite(13, "+b+");\n";
  }
  else if (a == "yellow") {
    Blockly.Arduino.setups_["setup_yellow_"]="pinMode(12, OUTPUT);\n";
    return"analogWrite(12, "+b+");\n";
  }
  else {
    Blockly.Arduino.setups_["setup_green_"]="pinMode(11, OUTPUT);\n";
    return"analogWrite(11, "+b+");\n";
  }
};
Blockly.Arduino.ez_start_kit_neopixel_begin=function(){
  var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a < 0) {
    a = 0;
  }
  if (a > 255) {
    a = 255;
  }
  Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
  if (Blockly.Arduino.my_board_type=="7697"){
    Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(3, 4,NEO_GRB + NEO_KHZ800);\n";
  } else if (Blockly.Arduino.my_board_type=="Pico"){
    Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(3, 21,NEO_GRB + NEO_KHZ800);\n";
  }

  Blockly.Arduino.setups_.setup_neopixel_begin="pixels.begin();\n";
  Blockly.Arduino.setups_.setup_neopixel_brightness="pixels.setBrightness("+a+");\n";
  return""
};
Blockly.Arduino.ez_start_kit_neopixel_setpixelcolor=function(){
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("RGB");
  return"pixels.setPixelColor("+a+",pixels.Color("+hexToR(b)+","+hexToG(b)+","+hexToB(b)+"));\n"
};
Blockly.Arduino.ez_start_kit_neopixel_setpixelcolor_hex=function(){
  Blockly.Arduino.definitions_.setWS2812LEDSHEX="void setWS2812LEDHEX(byte idx, String hex_color) {\nlong number = strtol( &hex_color[1], NULL, 16);\npixels.setPixelColor(idx, pixels.Color(number >> 16, number >> 8 & 0xFF, number & 0xFF));\n}\n";
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0";
  var b=Blockly.Arduino.valueToCode(this,"RGB_HEX",Blockly.Arduino.ORDER_ATOMIC)||"#000000";
  return "setWS2812LEDHEX(" + a + ", " + b + ");\n"
};
Blockly.Arduino.ez_start_kit_neopixel_custom_setpixelcolor=function(){
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"R",Blockly.Arduino.ORDER_ATOMIC)||"255",
      c=Blockly.Arduino.valueToCode(this,"G",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"B",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return"pixels.setPixelColor("+a+", pixels.Color("+b+","+c+","+d+"));\n"
};
Blockly.Arduino.ez_start_kit_neopixel_show=function(){
  return"pixels.show();\npixels.show();\n"
};

Blockly.Arduino.ez_start_kit_neopixel_clear=function(){
  Blockly.Arduino.definitions_.define_button_c="void neopixel_clear()\n{\npixels.setPixelColor(0,pixels.Color(0,0,0));\npixels.setPixelColor(1,pixels.Color(0,0,0));\npixels.setPixelColor(2,pixels.Color(0,0,0));\npixels.show();\npixels.show();\n }\n";
  return"pixels.clear();\n"
};

Blockly.Arduino.ez_start_kit_oled_display_setting=function(){
  Blockly.Arduino.definitions_.define_wire='#include "Wire.h"';
  Blockly.Arduino.definitions_.define_u8g2_oled_include='#include "U8g2lib.h"';
  Blockly.Arduino.definitions_.define_u8g2_oled_declare="U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);";
  Blockly.Arduino.setups_.setup_define_u8g2_oled="u8g2.begin();\n  u8g2.setFont(u8g2_font_6x10_tf);\n  u8g2.setFontRefHeightExtendedText();\n  u8g2.setDrawColor(1);\n  u8g2.setFontPosTop();\n  u8g2.setFontDirection(0);\n";return""
};
Blockly.Arduino.ez_start_kit_oled_display_clear=function(){
  return"u8g2.clearDisplay();\n"
};
Blockly.Arduino.ez_start_kit_oled_display_draw_commands=function(){
  return"u8g2.firstPage();\ndo {\n"+Blockly.Arduino.statementToCode(this,"DRAW_CMD")+"\n  u8g2.sendBuffer();\n} while (u8g2.nextPage());\n"
};
Blockly.Arduino.ez_start_kit_oled_display_set_font=function(){
  return"u8g2.setFont("+this.getFieldValue("FONT")+");\n"
};
Blockly.Arduino.ez_start_kit_oled_display_set_album=function(){
  var a=this.getFieldValue("CUSTOM_ALBUM"),
      b=Blockly.Arduino.valueToCode(this,"ALBUM",Blockly.Arduino.ORDER_ATOMIC)||"";
  b=b.replace(/"/g,"");
  if (a == "C1") {
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album1_"+b]="const unsigned char C1[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C2"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album2_"+b]="const unsigned char C2[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C3"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album3_"+b]="const unsigned char C3[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C4"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album4_"+b]="const unsigned char C4[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C5"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album5_"+b]="const unsigned char C5[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C6"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album6_"+b]="const unsigned char C6[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C7"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album7_"+b]="const unsigned char C7[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C8"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album8_"+b]="const unsigned char C8[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C9"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album9_"+b]="const unsigned char C9[] U8X8_PROGMEM= {"+b+"};\n";
  } else {
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album10_"+b]="const unsigned char C10[] U8X8_PROGMEM= {"+b+"};\n";
  }
  return""
};

Blockly.Arduino.ez_start_kit_oled_display_show_album=function(){
  var a=this.getFieldValue("CUSTOM_ALBUM");
  if (a == "C1") {
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C1);\nu8g2.sendBuffer();\n";
  } else if (a == "C2"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C2);\nu8g2.sendBuffer();\n";
  } else if (a == "C3"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C3);\nu8g2.sendBuffer();\n";
  } else if (a == "C4"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C4);\nu8g2.sendBuffer();\n";
  } else if (a == "C5"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C5);\nu8g2.sendBuffer();\n";
  } else if (a == "C6"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C6);\nu8g2.sendBuffer();\n";
  } else if (a == "C7"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C7);\nu8g2.sendBuffer();\n";
  } else if (a == "C8"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C8);\nu8g2.sendBuffer();\n";
  } else if (a == "C9"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C9);\nu8g2.sendBuffer();\n";
  } else {
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C10);\nu8g2.sendBuffer();\n";
  }
};

Blockly.Arduino.ez_start_kit_oled_display_set_album2=function(){
  var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"",
      b=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  a=a.replace(/"/g,"");
  b=b.replace(/"/g,"");
  Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album1_"+a]="const unsigned char "+a+"[] U8X8_PROGMEM= {"+b+"};\n";
  return""
};

Blockly.Arduino.ez_start_kit_oled_display_show_album2=function(){
  var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
  a=a.replace(/"/g,"");
  return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, "+a+");\nu8g2.sendBuffer();\n";

};

// RockBot
Blockly.Arduino.RockBot={};
Blockly.Arduino.RockBot_motor_go=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Move_direction="void Move_direction(int8_t S1, int8_t S2, int8_t S3, int8_t S4) {\n  Send_iic(0x00, S1);\n  Send_iic(0x01, S2);\n  Send_iic(0x02, S3);\n  Send_iic(0x03, S4);\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";
  var a=this.getFieldValue("STATE"),
      s=Blockly.Arduino.valueToCode(this,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (s > 127) s = 127;
  if (s < 0) s = 0;

  if (a == "Move_forward") {
    return "Move_direction("+s+", "+s+", "+s+", "+s+");\n";
  } else if (a == "Move_back") {
    return "Move_direction("+s+"*(-1), "+s+"*(-1), "+s+"*(-1), "+s+"*(-1));\n";
  } else if (a == "Move_turnleft") {
    return "Move_direction("+s+"*(-1), "+s+", "+s+"*(-1), "+s+");\n";
  } else if (a == "Move_turnright") {
    return "Move_direction("+s+", "+s+"*(-1), "+s+", "+s+"*(-1));\n";
  } else if (a == "Move_left") {
    return "Move_direction("+s+"*(-1), "+s+", "+s+", "+s+"*(-1));\n";
  } else if (a == "Move_right") {
    return "Move_direction("+s+", "+s+"*(-1), "+s+"*(-1), "+s+");\n";
  } else if (a == "Move_frontright") {
    return "Move_direction("+s+", 0, 0, "+s+");\n";
  } else if (a == "Move_backleft") {
    return "Move_direction("+s+"*(-1), 0, 0, "+s+"*(-1));\n";
  } else if (a == "Move_frontleft") {
    return "Move_direction(0, "+s+", "+s+", 0);\n";
  } else if (a == "Move_backright") {
    return "Move_direction(0, "+s+"*(-1), "+s+"*(-1), 0);\n";
  } else {
    return "Move_direction(0, 0, 0, 0);\n";
  }
};

Blockly.Arduino.RockBot_motor_control=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Move_direction="void Move_direction(int8_t S1, int8_t S2, int8_t S3, int8_t S4) {\n  Send_iic(0x00, S1);\n  Send_iic(0x01, S2);\n  Send_iic(0x02, S3);\n  Send_iic(0x03, S4);\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";

  var a=Blockly.Arduino.valueToCode(this,"LF",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"RF",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"LB",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"RB",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a > 127) a = 127;
  if (a < -127) a = -127;
  if (b > 127) b = 127;
  if (b < -127) b = -127;
  if (c > 127) c = 127;
  if (c < -127) c = -127;
  if (d > 127) d = 127;
  if (d < -127) d = -127;

  return "Move_direction("+a+", "+b+", "+c+", "+d+");\n";
};

Blockly.Arduino.RockBot_servo_control=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Servo_angle="void Servo_angle(uint8_t Servo_ch, uint8_t degree) {\n  Send_iic((Servo_ch - 1) | 0x10 ,int(degree));\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";
  var a=this.getFieldValue("ServoNumber"),
      s=Blockly.Arduino.valueToCode(this,"degree",Blockly.Arduino.ORDER_ATOMIC)||"0";

  if (s > 90) s = 90;
  if (s < 0) s = 0;

  if (a == "S1") {
    return "Servo_angle(1, "+s+");\n";
  }
  else {
    return "Servo_angle(2, "+s+");\n";
  }
};
/*
Blockly.Arduino.RockBot_servo_pulse_control=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Servo_pulse="void Servo_pulse(uint8_t Servo_ch, uint16_t width) {\n  width = min(2500, int(width));\n  width = max(500, int(width));\n  Send_iic((Servo_ch - 1) | 0x20, width);\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";
  var a=this.getFieldValue("ServoNumber"),
      s=Blockly.Arduino.valueToCode(this,"pulse",Blockly.Arduino.ORDER_ATOMIC)||"0";

  if (a == "S1") {
    return "Servo_pulse(1, "+s+");\n";
  }
  else {
    return "Servo_pulse(2, "+s+");\n";
  }
};
*/
Blockly.Arduino.IO_digital_write=function(){
  var a=this.getFieldValue("IO_PIN"),
      b=this.getFieldValue("STAT");
  Blockly.Arduino.setups_["setup_output_"+a]="pinMode("+a+", OUTPUT);";
  return "digitalWrite("+a+", "+b+");\n"
};

Blockly.Arduino.IO_digital_read=function(){
  var a=this.getFieldValue("IO_PIN");
  Blockly.Arduino.setups_["setup_input_"+a]||(Blockly.Arduino.setups_["setup_input_"+a]="pinMode("+a+", INPUT);");
  return["digitalRead("+a+")",Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.IO_analog_write=function(){
  var a=this.getFieldValue("IO_PIN"),
      b=Blockly.Arduino.valueToCode(this,"IO_value",Blockly.Arduino.ORDER_ATOMIC)||"255";
  Blockly.Arduino.setups_["setup_output_"+a]="pinMode("+a+", OUTPUT);";
  return"analogWrite("+a+", "+b+");\n"
};

Blockly.Arduino.IO_analog_read=function(){
  return["analogRead("+this.getFieldValue("IO_PIN")+")",Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.RockBot_custom_tone=function(){
  var a=Blockly.Arduino.valueToCode(this,"FREQ",Blockly.Arduino.ORDER_ATOMIC)||0,
      b=Blockly.Arduino.valueToCode(this,"DURATION",Blockly.Arduino.ORDER_ATOMIC)||0;
  return"tone(14, "+a+", "+b+");\n"
};

Blockly.Arduino.RockBot_tone=function(){
  var a=this.getFieldValue("FREQ");
  return"tone(14, "+a+");\n"
};

Blockly.Arduino.RockBot_no_tone=function(){
  return"noTone(14);\n"
};

Blockly.Arduino.RockBot_neopixel_begin=function(){
  var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a < 0) {
    a = 0;
  }
  if (a > 255) {
    a = 255;
  }
  Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
  Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(2, 4,NEO_GRB + NEO_KHZ800);\n";
  Blockly.Arduino.setups_.setup_neopixel_begin="pixels.begin();\n";
  Blockly.Arduino.setups_.setup_neopixel_brightness="pixels.setBrightness("+a+");\n";
  return""
};

Blockly.Arduino.RockBot_neopixel_setpixelcolor=function(){
  var a=this.getFieldValue("light_IO"),
      b=this.getFieldValue("RGB");
  return"pixels.setPixelColor("+a+",pixels.Color("+hexToR(b)+","+hexToG(b)+","+hexToB(b)+"));\n"
};

Blockly.Arduino.RockBot_neopixel_custom_setpixelcolor=function(){
  var a=this.getFieldValue("light_IO"),
      b=Blockly.Arduino.valueToCode(this,"R",Blockly.Arduino.ORDER_ATOMIC)||"255",
      c=Blockly.Arduino.valueToCode(this,"G",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"B",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return"pixels.setPixelColor("+a+", pixels.Color("+b+","+c+","+d+"));\n"
};

Blockly.Arduino.RockBot_neopixel_show=function(){
  return"pixels.show();\npixels.show();\n"
};

Blockly.Arduino.RockBot_neopixel_clear=function(){
  Blockly.Arduino.definitions_.define_button_c="void neopixel_clear()\n{\npixels.setPixelColor(0,pixels.Color(0,0,0));\npixels.setPixelColor(1,pixels.Color(0,0,0));\npixels.setPixelColor(2,pixels.Color(0,0,0));\npixels.show();\npixels.show();\n }\n";
  return"pixels.clear();\n"
};


// NFC/RFID
Blockly.Arduino.NFC_RFID={};
Blockly.Arduino.NFC_RFID_setup=function(){
  var a=Blockly.Arduino.valueToCode(this,"IRQ",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_NFC_RFID="#include <Wire.h>\n#include <Adafruit_PN532_linkit.h>\n#define PN532_IRQ   ("+a+")\n#define PN532_RESET (0)\nAdafruit_PN532_linkit nfc(PN532_IRQ, PN532_RESET);\n";
  Blockly.Arduino.setups_.setup_define_NFC_RFID="nfc.begin();\n  nfc.SAMConfig();\n";
  return""
};

Blockly.Arduino.NFC_RFID_read=function(){
  Blockly.Arduino.definitions_.define_read_RFID="String read_RFID() {\n uint8_t success;\n uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n uint8_t uidLength;\n success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success) {\n    if (uidLength == 4) {\n      uint32_t cardid;\n       cardid = uid[0];\n       cardid <<= 8;\n       cardid |= uid[1];\n       cardid <<= 8;\n       cardid |= uid[2];\n       cardid <<= 8;\n       cardid |= uid[3];\n       return String(cardid, HEX);\n     } \n   }else {\n      return \"Error\";\n  }\n}\n";
  return["read_RFID()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.NFC_RFID_read_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_read_BLOCK="String Read_Sector_Block(byte sec, byte blo) {\n  uint8_t success;\n  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n  uint8_t uidLength;\n  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  uint8_t data[16];\n  uint8_t keyuniversal[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };\n  success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, blo, sec, keyuniversal);\n  success = nfc.mifareclassic_ReadDataBlock(blo, data);\n  if (success) {\n    if (uidLength == 4) {  \n      uint32_t cardid;\n      cardid = data[0];\n      cardid <<= 8;\n      cardid |= data[1];\n      cardid <<= 8;\n      cardid |= data[2];\n      cardid <<= 8;\n      cardid |= data[3];\n      return String(cardid, HEX);\n    }\n  }\n  else {\n    return \"Error\";\n  }\n}\n";

  return["Read_Sector_Block("+a+", "+b+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.NFC_RFID_write_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  Blockly.Arduino.definitions_.define_read_BLOCK="void rfid_writer(byte sec, const char * url_) {\n  const char * url = url_;\n  uint8_t ndefprefix = NDEF_URIPREFIX_HTTP_WWWDOT;\n  uint8_t success;\n  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n  uint8_t uidLength;\n  bool authenticated = false;\n  uint8_t keya[6] = { 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5 };\n  uint8_t keyb[6] = { 0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7 };\n  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success){\n    nfc.PrintHex(uid, uidLength);\n    if (uidLength != 4){\n      return;\n    }\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 4, 0, keyb);\n    if (!success){\n      return;\n    }\n    if (strlen(url) > 38){\n      return;\n    }\n    success = nfc.mifareclassic_WriteNDEFURI(sec, ndefprefix, url);\n  }\n}\n";
  return"rfid_writer("+a+", "+b+");\n";
};

Blockly.Arduino.NFC_RFID_format=function(){
  Blockly.Arduino.definitions_.define_NFC_RFID_Write="const char * url = \"adafruit.com\";\nuint8_t ndefprefix = NDEF_URIPREFIX_HTTP_WWWDOT;\n";
  Blockly.Arduino.definitions_.define_read_BLOCK="void clearn() {\n  uint8_t success;\n  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n  uint8_t uidLength;\n  bool authenticated = false;\n  uint8_t keya[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };\n  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success){\n    nfc.PrintHex(uid, uidLength);\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 0, 0, keya);\n    if (!success){\n      return;\n    }\n    success = nfc.mifareclassic_FormatNDEF();\n    if (!success){\n      return;\n    }\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 4, 0, keya);\n    if (!success){\n      return;\n    }\n    if (strlen(url) > 38){\n      return;\n    }\n    success = nfc.mifareclassic_WriteNDEFURI(1, ndefprefix, url);\n    if (success){\n      Serial.println(\"NDEF URI Record written to sector 1\");\n    }\n    else{\n      Serial.println(\"NDEF Record creation failed! :(\");\n;    }\n  }\n}\n";
  return"clearn();\n";
};

Blockly.Arduino.mfrc522_read_nostop=function(){
  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(/*SS_PIN*/ 10, /*RST_PIN*/ UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_readid_nostop='\nString mfrc522_readID_nostop()\n{\n  String ret;\n  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())\n  {\n    MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n\n    for (byte i = 0; i < rfid.uid.size; i++) {\n      ret += (rfid.uid.uidByte[i] < 0x10 ? "0" : "");\n      ret += String(rfid.uid.uidByte[i], HEX);\n    }\n  }\n  return ret;\n}\n';
  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  return["mfrc522_readID_nostop()",Blockly.Arduino.ORDER_ATOMIC]
};
/*
Blockly.Arduino.mfrc522_read_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0";

  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(10, UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst2="MFRC522::MIFARE_Key key;\nbyte buffer[18];\nMFRC522::StatusCode status;\n";

  Blockly.Arduino.definitions_.define_mfrc522_read_BLOCK="String readBlock(byte _sector, byte _block, byte _blockData[])  {\n  if (_sector < 0 || _sector > 15 || _block < 0 || _block > 3) {\n    return \"error\";\n  }\n  byte blockNum = _sector * 4 + _block;\n  byte trailerBlock = _sector * 4 + 3;\n  status = (MFRC522::StatusCode) rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(rfid.uid));\n  if (status != MFRC522::STATUS_OK) {\n    return \"error\";\n  }\n  byte buffersize = 18;\n  status = (MFRC522::StatusCode) rfid.MIFARE_Read(blockNum, _blockData, &buffersize);\n  if (status != MFRC522::STATUS_OK) {\n    return \"error\";\n  }\n  String outputText = String((char*)buffer);\n  return outputText;\n}\n";

  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  Blockly.Arduino.setups_.setup_mfrc522_2="for (byte i = 0; i < 6; i++) {\n    key.keyByte[i] = 0xFF;\n  }\n";

  return["readBlock("+a+", "+b+", buffer)",Blockly.Arduino.ORDER_ATOMIC];
};
*/
Blockly.Arduino.mfrc522_read_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0";

  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(10, UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst2="MFRC522::MIFARE_Key key;\nbyte buffer[18];\nMFRC522::StatusCode status;\n";
  Blockly.Arduino.definitions_.define_mfrc522_readid_nostop='\nString mfrc522_readID_nostop()\n{\n  String ret;\n  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())\n  {\n    MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n\n    for (byte i = 0; i < rfid.uid.size; i++) {\n      ret += (rfid.uid.uidByte[i] < 0x10 ? "0" : "");\n      ret += String(rfid.uid.uidByte[i], HEX);\n    }\n  }\n  return ret;\n}\n';
  Blockly.Arduino.definitions_.define_mfrc522_read_BLOCK="String readBlock(byte _sector, byte _block, byte _blockData[])  {\n  if (_sector < 0 || _sector > 15 || _block < 0 || _block > 3) {\n    return \"error\";\n  }\n  byte blockNum = _sector * 4 + _block;\n  byte trailerBlock = _sector * 4 + 3;\n  status = (MFRC522::StatusCode) rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(rfid.uid));\n  if (status != MFRC522::STATUS_OK) {\n    return \"error\";\n  }\n  byte buffersize = 18;\n  status = (MFRC522::StatusCode) rfid.MIFARE_Read(blockNum, _blockData, &buffersize);\n  if (status != MFRC522::STATUS_OK) {\n    return \"error\";\n  }\n  String outputText = String((char*)buffer);\n  return outputText;\n}\n";
  Blockly.Arduino.definitions_.define_mfrc522_check_and_read_BLOCK="String check_card_and_read(int sector_, int block_) {\n  String readData_;\n  if (mfrc522_readID_nostop() != \"\") {\n    readData_ = readBlock(sector_, block_, buffer);\n    rfid.PICC_HaltA();\n    rfid.PCD_StopCrypto1();\n  } else {\n    readData_ = \"error\";\n  }\n  return (readData_);\n}"
  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  Blockly.Arduino.setups_.setup_mfrc522_2="for (byte i = 0; i < 6; i++) {\n    key.keyByte[i] = 0xFF;\n  }\n";

  return["check_card_and_read("+a+", "+b+")",Blockly.Arduino.ORDER_ATOMIC];
};
/*
Blockly.Arduino.mfrc522_write_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(10, UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst2="MFRC522::MIFARE_Key key;\nbyte buffer[18];\nMFRC522::StatusCode status;\n";
  Blockly.Arduino.definitions_.define_mfrc522_write_BLOCK="void writeBlock(byte _sector, byte _block, String _writeText) {\n  byte _blockData[16] = \"\";\n  _writeText.getBytes(_blockData, _writeText.length() + 1);\n  if (_sector < 0 || _sector > 15 || _block < 0 || _block > 3) {\n    return;\n  }\n  if (_sector == 0 && _block == 0) {\n    return;\n  }\n  byte blockNum = _sector * 4 + _block;\n  byte trailerBlock = _sector * 4 + 3;\n  status = (MFRC522::StatusCode) rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(rfid.uid));\n  if (status != MFRC522::STATUS_OK) {\n    return;\n  }\n  status = (MFRC522::StatusCode) rfid.MIFARE_Write(blockNum, _blockData, 16);\n  if (status != MFRC522::STATUS_OK) {\n    return;\n  }\n}\n"
  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  Blockly.Arduino.setups_.setup_mfrc522_2="for (byte i = 0; i < 6; i++) {\n  key.keyByte[i] = 0xFF;\n}\n";
  return"writeBlock("+a+", "+b+", "+c+");\n";
};
*/
Blockly.Arduino.mfrc522_write_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(10, UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst2="MFRC522::MIFARE_Key key;\nbyte buffer[18];\nMFRC522::StatusCode status;\n";
  Blockly.Arduino.definitions_.define_mfrc522_readid_nostop='\nString mfrc522_readID_nostop()\n{\n  String ret;\n  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())\n  {\n    MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n\n    for (byte i = 0; i < rfid.uid.size; i++) {\n      ret += (rfid.uid.uidByte[i] < 0x10 ? "0" : "");\n      ret += String(rfid.uid.uidByte[i], HEX);\n    }\n  }\n  return ret;\n}\n';
  Blockly.Arduino.definitions_.define_mfrc522_write_BLOCK="void writeBlock(byte _sector, byte _block, String _writeText) {\n  byte _blockData[16] = \"\";\n  _writeText.getBytes(_blockData, _writeText.length() + 1);\n  if (_sector < 0 || _sector > 15 || _block < 0 || _block > 3) {\n    return;\n  }\n  if (_sector == 0 && _block == 0) {\n    return;\n  }\n  byte blockNum = _sector * 4 + _block;\n  byte trailerBlock = _sector * 4 + 3;\n  status = (MFRC522::StatusCode) rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(rfid.uid));\n  if (status != MFRC522::STATUS_OK) {\n    return;\n  }\n  status = (MFRC522::StatusCode) rfid.MIFARE_Write(blockNum, _blockData, 16);\n  if (status != MFRC522::STATUS_OK) {\n    return;\n  }\n}\n"
  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  Blockly.Arduino.setups_.setup_mfrc522_2="for (byte i = 0; i < 6; i++) {\n  key.keyByte[i] = 0xFF;\n}\n";
  return"if (mfrc522_readID_nostop() != \"\") {\n    writeBlock("+a+", "+b+", "+c+");\n    rfid.PICC_HaltA();\n    rfid.PCD_StopCrypto1();\n}";
};

Blockly.Arduino.mfrc522_stop=function(){
  return"rfid.PICC_HaltA();\nrfid.PCD_StopCrypto1();\n";
};

// M5Stack Stick V / Unit V
Blockly.Arduino.m5_stack_v={};
Blockly.Arduino.m5_stack_v_serial_set=function(){
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_serial_set_include="#include <SoftwareSerial.h>\n";
  Blockly.Arduino.definitions_.define_serial_set_receive_inst="SoftwareSerial Serial2_("+a+", "+b+");\n";
  Blockly.Arduino.definitions_.define_serial_set_function='String Data_Main_Receive() {\n  char result_buf[256] = "";\n  if (Serial2_.available() > 0) {\n    int recv_len = Serial2_.readBytesUntil(\'\\r\', result_buf, 256);\n    Serial2_.flush();\n    String message_ = "";\n    for (int i=0; i<256; i++) {\n      message_ += String(result_buf[i]);\n    }\n    return message_;\n  }\n  else {\n    return "None";\n  }\n}\n';
  Blockly.Arduino.setups_.setup_serial_set_inst="Serial2_.begin(115200);\n";
  return""
};

Blockly.Arduino.m5_stack_v_motion_detect_mode=function(){
  Blockly.Arduino.definitions_.define_motion_detect_mode='void Motion_Detect_mode_Send(int mode_) {\n  String TT;\n  char input_[100] = "";\n  if (mode_ == 0) {\n    TT = "{\\"MOTION DETECT\\": 1.0, \\"mode\\": \\"COMPUTE_MODE_STATIC\\"}";\n    TT.toCharArray(input_, 100);\n    Serial2_.print(input_);\n  }\n  else {\n    TT = "{\\"MOTION DETECT\\": 1.0, \\"mode\\": \\"COMPUTE_MODE_DYNAMIC\\"}";\n    TT.toCharArray(input_, 100);\n    Serial2_.print(input_);\n  }\n}\n';
  var a=this.getFieldValue("m5_motion_detect_mode");
  if (a == "m5_static") {
    return "for(int i=0;i<3;i++){Motion_Detect_mode_Send(0);delay(50);}\n";
  }
  else {
    return "for(int i=0;i<3;i++){Motion_Detect_mode_Send(1);delay(50);}\n";
  }
};

Blockly.Arduino.m5_stack_v_motion_detect_thr=function(){
  Blockly.Arduino.definitions_.define_motion_detect_thr='void Motion_Detect_thr_Send(int thr_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"MOTION DETECT\\": 1.0, \\"delta\\": " + String(thr_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"thr_",Blockly.Arduino.ORDER_ATOMIC)||"20";
  if (a < 0) {a = 0;}
  if (a > 99) {a = 99;}
  return "for(int i=0;i<3;i++){Motion_Detect_thr_Send("+a+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_motion_detect_scan=function(){
  Blockly.Arduino.definitions_.define_motion_detect_scan='void Motion_Detect_scan_Send(int scanx_, int scany_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"MOTION DETECT\\": 1.0, \\"stepy\\": " + String(scany_) + ", \\"stepx\\": " + String(scanx_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"scanx_",Blockly.Arduino.ORDER_ATOMIC)||"1",
      b=Blockly.Arduino.valueToCode(this,"scany_",Blockly.Arduino.ORDER_ATOMIC)||"2";
  if (a < 0) {a = 0;}
  if (a > 40) {a = 40;}
  if (b < 0) {b = 0;}
  if (b > 40) {b = 40;}
  return "for(int i=0;i<3;i++){Motion_Detect_scan_Send("+a+", "+b+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_motion_detect_main=function(){
  Blockly.Arduino.definitions_.define_motion_detect_main='String Motion_Detect_Main_(int data_) {\n  String new_Text_ = Data_Main_Receive();\n  if (new_Text_ == "None") {\n    return "None";\n  }\n  else {\n    int diff_total = new_Text_.indexOf(",\\"DIFF TOTAL\\":");\n    int diff_max = new_Text_.indexOf(",\\"DIFF MAX\\":");\n    int total = new_Text_.indexOf(",\\"TOTAL\\":");\n    if (data_ == 0) {\n      String diff_total_;\n      for (int i=diff_total+14; i<diff_max; i++) {\n        diff_total_ += new_Text_[i];\n      }\n      return diff_total_;\n    }\n    else if (data_ == 1) {\n      String diff_max_;\n      for (int i=diff_max+12; i<total; i++) {\n        diff_max_ += new_Text_[i];\n      }\n      return diff_max_;\n    }\n    else {\n      String total_ = String(new_Text_[total+9]);\n      return total_;\n    }\n  }\n}\n';
  var a=this.getFieldValue("m5_stack_v_motion_detect_main");
  if (a == "m5_diff_total") {
    return["Motion_Detect_Main_(0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "m5_diff_max") {
    return["Motion_Detect_Main_(1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Motion_Detect_Main_(2)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_motion_detect_data=function(){
  Blockly.Arduino.definitions_.define_motion_detect_data='String Motion_Detect_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int x = new_Text_.indexOf("{\\"x\\":");\n    int y = new_Text_.indexOf(",\\"y\\":");\n    int w = new_Text_.indexOf(",\\"w\\":");\n    int h = new_Text_.indexOf(",\\"h\\":");\n    int area = new_Text_.indexOf(",\\"area\\":");\n    int ends = new_Text_.indexOf("}");\n    if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+5; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+5; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else if (data_ == 3) {\n      String h_;\n      for (int i=h+5; i<area; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n    else {\n      String area_;\n      for (int i=area+8; i<ends; i++) {\n\n        area_ += new_Text_[i];\n      }\n      return area_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_motion_detect_data");

  if (b == "m5_x") {
    return["Motion_Detect_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_y") {
    return["Motion_Detect_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_w") {
    return["Motion_Detect_data_("+a+", 2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_h") {
    return["Motion_Detect_data_("+a+", 3)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Motion_Detect_data_("+a+", 4)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_target_trace_set=function(){
  Blockly.Arduino.definitions_.define_target_trace_set='void Target_Trace_Send(int x_, int y_, int w_, int h_) {\n    String TT = "{\\"TARGET TRACKER\\":\\" V1.0\\",\\"x\\":" + String(x_) + ",\\"y\\":" + String(y_) + ",\\"w\\":" + String(w_) + ",\\"h\\":" + String(h_) + "}";\n    char input_[256] = "";\n    TT.toCharArray(input_, 256);\n    Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"x_",Blockly.Arduino.ORDER_ATOMIC)||"140",
      b=Blockly.Arduino.valueToCode(this,"y_",Blockly.Arduino.ORDER_ATOMIC)||"100",
      c=Blockly.Arduino.valueToCode(this,"w_",Blockly.Arduino.ORDER_ATOMIC)||"40",
      d=Blockly.Arduino.valueToCode(this,"h_",Blockly.Arduino.ORDER_ATOMIC)||"40";
  return "for(int i=0;i<3;i++){Target_Trace_Send("+a+", "+b+", "+c+", "+d+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_target_trace_read=function(){
  Blockly.Arduino.definitions_.define_motion_detect_data='String Target_Trace_data_(int data_) {\n  String new_Text_ = Data_Main_Receive();\n  if (new_Text_ == "None") {\n    return "None";\n  }\n  else {\n    int x = new_Text_.indexOf(",\\"x\\":");\n    int y = new_Text_.indexOf(",\\"y\\":");\n    int w = new_Text_.indexOf(",\\"w\\":");\n    int h = new_Text_.indexOf(",\\"h\\":");\n    int ends = new_Text_.indexOf("}");\n        if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+5; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+5; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else {\n      String h_;\n      for (int i=h+5; i<ends; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n  }\n}\n';
  var a=this.getFieldValue("m5_stack_v_target_trace_data");

  if (a == "m5_x") {
    return["Target_Trace_data_(0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "m5_y") {
    return["Target_Trace_data_(1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "m5_w") {
    return["Target_Trace_data_(2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Target_Trace_data_(3)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_color_trace_lab=function(){
  Blockly.Arduino.definitions_.define_color_trace_lab='void Color_Trace_LAB(int Lmin_, int Lmax_, int Amin_, int Amax_, int Bmin_, int Bmax_) {\n  String TT;\n  char input_[128] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"Amax\\": " + String(Amax_) + ", \\"Lmin\\": " + String(Lmin_) + ", \\"Bmax\\": " + String(Bmax_) + ", \\"Bmin\\": " + String(Bmin_) + ", \\"Lmax\\": " + String(Lmax_) + ", \\"Amin\\": " + String(Amin_) + "}";\n  TT.toCharArray(input_, 128);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"Lmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Lmax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Amin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"Amax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      e=Blockly.Arduino.valueToCode(this,"Bmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      f=Blockly.Arduino.valueToCode(this,"Bmax_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_LAB("+a+", "+b+", "+c+", "+d+", "+e+", "+f+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_scan=function(){
  Blockly.Arduino.definitions_.define_color_trace_scan='void Color_Trace_Scan(int scanx_, int scany_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"stepy\\": " + String(scany_) + ", \\"stepx\\": " + String(scanx_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"scanx_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"scany_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_Scan("+a+", "+b+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_merge=function(){
  Blockly.Arduino.definitions_.define_color_trace_merge='void Color_Trace_Merge(int mer_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"merge\\": " + String(mer_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"mer_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_Merge("+a+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_thr=function(){
  Blockly.Arduino.definitions_.define_color_trace_thr='void Color_Trace_Thr(int thrw_, int thrh_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"thr_h\\": " + String(thrh_) + ", \\"thr_w\\": " + String(thrw_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"thrw_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"thrh_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_Thr("+a+", "+b+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_count=function(){
  Blockly.Arduino.definitions_.define_color_trace_count='String Color_Trace_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"TOTAL\\":");\n    String retotal_ = String(Text_[total_+8]);\n    return retotal_;\n  }\n}\n';
  return["Color_Trace_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_color_trace_data=function(){
  Blockly.Arduino.definitions_.define_color_trace_data='String Color_Trace_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int x = new_Text_.indexOf("{\\"x\\":");\n    int y = new_Text_.indexOf(",\\"y\\":");\n    int w = new_Text_.indexOf(",\\"w\\":");\n    int h = new_Text_.indexOf(",\\"h\\":");\n    int area = new_Text_.indexOf(",\\"area\\":");\n    int ends = new_Text_.indexOf("}");\n      if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+5; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+5; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else if (data_ == 3) {\n      String h_;\n      for (int i=h+5; i<area; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n    else {\n      String area_;\n      for (int i=area+8; i<ends; i++) {\n        area_ += new_Text_[i];\n      }\n      return area_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_color_trace_data");

  if (b == "m5_x") {
    return["Color_Trace_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_y") {
    return["Color_Trace_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_w") {
    return["Color_Trace_data_("+a+", 2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_h") {
    return["Color_Trace_data_("+a+", 3)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Color_Trace_data_("+a+", 4)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_face_detect_count=function(){
  Blockly.Arduino.definitions_.define_face_detect_count='String Face_Detect_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n }\n';
  return["Face_Detect_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_face_detect_data=function(){
  Blockly.Arduino.definitions_.define_face_detect_data='String Face_Detect_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int x = new_Text_.indexOf("{\\"x\\":");\n    int y = new_Text_.indexOf(", \\"y\\":");\n    int w = new_Text_.indexOf(", \\"w\\":");\n    int h = new_Text_.indexOf(", \\"h\\":");\n    int valu = new_Text_.indexOf(", \\"value\\":");\n    int ends = new_Text_.indexOf(", \\"classid\\":");\n      if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+6; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+6; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else if (data_ == 3) {\n      String h_;\n      for (int i=h+6; i<valu; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n    else {\n      String value_;\n      for (int i=valu+10; i<ends; i++) {\n        value_ += new_Text_[i];\n      }\n      return value_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_face_detect_data");

  if (b == "m5_x") {
    return["Face_Detect_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_y") {
    return["Face_Detect_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_w") {
    return["Face_Detect_data_("+a+", 2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_h") {
    return["Face_Detect_data_("+a+", 3)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Face_Detect_data_("+a+", 4)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_qr_code_set=function(){
  Blockly.Arduino.definitions_.define_qr_code_set='void QR_Mode_Send() {\n    String TT = "{\\"mode\\": \\"QRCODE\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){QR_Mode_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_qr_code_count=function(){
  Blockly.Arduino.definitions_.define_qr_code_count='String QR_Code_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n }\n';
  return["QR_Code_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_qr_code_data=function(){
  Blockly.Arduino.definitions_.define_qr_code_data='String QR_Code_data_(int box_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int payload = new_Text_.indexOf("\\"payload\\":");\n    int ends = new_Text_.indexOf(", \\"version\\":");\n    String payload_;\n    for (int i=payload+10; i<ends; i++) {\n      payload_ += new_Text_[i];\n    }\n    return payload_;\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["QR_Code_data_("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_bar_code_set=function(){
  Blockly.Arduino.definitions_.define_bar_code_set='void Bar_Code_Send() {\n    String TT = "{\\"mode\\": \\"BARCODE\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){Bar_Code_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_bar_code_count=function(){
  Blockly.Arduino.definitions_.define_bar_code_count='String Bar_Code_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n}\n';
  return["Bar_Code_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_bar_code_data=function(){
  Blockly.Arduino.definitions_.define_bar_code_data='String Bar_Code_data_(int box_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int payload = new_Text_.indexOf("\\"payload\\":");\n    int ends = new_Text_.indexOf(", \\"type\\":");\n    String payload_;\n    for (int i=payload+10; i<ends; i++) {\n      payload_ += new_Text_[i];\n    }\n    return payload_;\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["Bar_Code_data_("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_datamatrix_code_set=function(){
  Blockly.Arduino.definitions_.define_datamatrix_code_set='void Datamatrix_Code_Send() {\n    String TT = "{\\"mode\\": \\"DATAMATRIX\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){Datamatrix_Code_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_datamatrix_code_count=function(){
  Blockly.Arduino.definitions_.define_datamatrix_code_count='String Datamatrix_Code_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n }\n';
  return["Datamatrix_Code_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_datamatrix_code_data=function(){
  Blockly.Arduino.definitions_.define_datamatrix_code_data='String Datamatrix_Code_data_(int box_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int payload = new_Text_.indexOf("\\"payload\\":");\n    int ends = new_Text_.indexOf(", \\"rotation\\":");\n    String payload_;\n    for (int i=payload+10; i<ends; i++) {\n      payload_ += new_Text_[i];\n    }\n    return payload_;\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["Datamatrix_Code_data_("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_april_tag_set=function(){
  Blockly.Arduino.definitions_.define_april_tag_set='void April_Tag_Send() {\n    String TT = "{\\"mode\\": \\"APRILTAG\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){April_Tag_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_april_tag_count=function(){
  Blockly.Arduino.definitions_.define_april_tag_count='String April_Tag_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n}\n';
  return["April_Tag_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_april_tag_data=function(){
  Blockly.Arduino.definitions_.define_april_tag_data='String April_Tag_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int id = new_Text_.indexOf("\\"id\\":");\n    int family = new_Text_.indexOf(", \\"family\\":");\n    int ends = new_Text_.indexOf(", \\"cx\\":");\n    if (data_ == 0) {\n      String id_;\n      for (int i=id+5; i<family; i++) {\n        id_ += new_Text_[i];\n      }\n      return id_;\n\n    }\n    else {\n      String family_;\n      for (int i=family+11; i<ends; i++) {\n        family_ += new_Text_[i];\n      }\n      return family_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_april_tag_data");
  if (b == "m5_id") {
      return["April_Tag_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["April_Tag_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_tag_reader_count=function(){
  Blockly.Arduino.definitions_.define_april_tag_count='String Tag_Reader_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"TOTAL\\":");\n    String retotal_ = String(Text_[total_+8]);\n    return retotal_;\n  }\n}\n';
  return["Tag_Reader_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_tag_reader_data=function(){
  Blockly.Arduino.definitions_.define_april_tag_data='String Tag_Reader_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int code = new_Text_.indexOf(",\\"code\\":");\n    int binstr = new_Text_.indexOf(",\\"binstr\\":");\n    int ends = new_Text_.indexOf("}");\n    if (data_ == 0) {\n      String code_;\n      for (int i=code+8; i<binstr; i++) {\n        code_ += new_Text_[i];\n      }\n      return code_;\n    }\n    else {\n      String binstr_;\n      for (int i=binstr+10; i<ends; i++) {\n        binstr_ += new_Text_[i];\n      }\n      return binstr_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_tag_reader_data");
  if (b == "m5_code") {
      return["Tag_Reader_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["Tag_Reader_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_line_tracker_lab=function(){
  Blockly.Arduino.definitions_.define_color_trace_lab='void Line_Tracker_LAB_Send(int Lmin_, int Lmax_, int Amin_, int Amax_, int Bmin_, int Bmax_) {\n    String TT = "{\\"Amax\\": "+ String(Amax_) +", \\"Bmax\\": "+ String(Bmax_) +", \\"LINE TRACKER\\": 1.0, \\"Lmin\\": "+ String(Lmin_) +", \\"Lmax\\": "+ String(Lmax_) +", \\"Bmin\\": "+ String(Bmin_) +", \\"Amin\\": "+ String(Amin_) +"}";\n    char input_[256] = "";\n    TT.toCharArray(input_, 256);\n    Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"Lmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Lmax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Amin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"Amax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      e=Blockly.Arduino.valueToCode(this,"Bmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      f=Blockly.Arduino.valueToCode(this,"Bmax_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Line_Tracker_LAB_Send("+a+", "+b+", "+c+", "+d+", "+e+", "+f+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_line_tracker_weight=function(){
  Blockly.Arduino.definitions_.define_color_trace_lab='void Line_Tracker_Weight_Send(float w0_, float w1_, float w2_) {\n    String TT = "{\\"weight_1\\": "+ String(w1_) +", \\"weight_2\\": "+ String(w2_) +", \\"weight_0\\": "+ String(w0_) +", \\"LINE TRACKER\\": 1.0}";\n    char input_[256] = "";\n    TT.toCharArray(input_, 256);\n    Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"W0_",Blockly.Arduino.ORDER_ATOMIC)||"0.1",
      b=Blockly.Arduino.valueToCode(this,"W1_",Blockly.Arduino.ORDER_ATOMIC)||"0.2",
      c=Blockly.Arduino.valueToCode(this,"W2_",Blockly.Arduino.ORDER_ATOMIC)||"0.7";
  return "for(int i=0;i<3;i++){Line_Tracker_Weight_Send("+a+", "+b+", "+c+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_line_tracker_data=function(){
  Blockly.Arduino.definitions_.define_april_tag_count='String Line_Tracker_data_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int angel = Text_.indexOf("\\"angle\\":");\n    int ends = Text_.indexOf("}");\n    String angel_;\n    for (int i=angel+8; i<ends; i++) {\n      angel_ += Text_[i];\n    }\n    return angel_;\n  }\n}\n';
  return["Line_Tracker_data_()",Blockly.Arduino.ORDER_ATOMIC];
};

// PCA9685
Blockly.Arduino.pca9685={};
Blockly.Arduino.pca9685_init=function(){
  Blockly.Arduino.definitions_.define_pca9685_init="#include <Wire.h>";
  Blockly.Arduino.definitions_.define_pca9685_init2="#include <Adafruit_PWMServoDriver.h>";
  Blockly.Arduino.definitions_["define_pca9685_init3"]="Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();\n";
  Blockly.Arduino.setups_["setup_pac9685_"]="pwm.begin();\n  pwm.setOscillatorFrequency(27000000);\n  pwm.setPWMFreq(50);\n  Wire.setClock(400000);\n";
  return""
};

Blockly.Arduino.pca9685_pwm_write=function(){
  var a=Blockly.Arduino.valueToCode(this,"Channel",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Value",Blockly.Arduino.ORDER_ATOMIC)||"4095";
  Blockly.Arduino.definitions_.define_pwm_write="void pwmset(int ch_, int pwm_) {\n  if (pwm_ < 0)pwm_ = 0;\n  if (pwm_ > 4095)pwm_ = 4095;\n  pwm.setPWM(ch_, 0, (pwm_ + (4096/16)*0) % 4096 );\n}\n";
  return"pwmset("+a+", "+b+");\n";
};

Blockly.Arduino.pca9685_servo_init=function(){
  var a=Blockly.Arduino.valueToCode(this,"pulse_min",Blockly.Arduino.ORDER_ATOMIC)||"600",
      b=Blockly.Arduino.valueToCode(this,"pulse_max",Blockly.Arduino.ORDER_ATOMIC)||"2400";
  Blockly.Arduino.definitions_["define_pca9685_init4"]="int servomin = "+a+";\nint servomax = "+b+";\n";
  return""
};

Blockly.Arduino.pca9685_servo_write=function(){
  var a=Blockly.Arduino.valueToCode(this,"Channel",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Degree",Blockly.Arduino.ORDER_ATOMIC)||"180";
  Blockly.Arduino.definitions_.define_servo_write="void servoset(int ch_, int deg_) {\n  if (deg_ < 0)deg_ = 0;\n  if (deg_ > 180)deg_ = 180;\n  int pulse_ = map(deg_, 0, 180, servomin, servomax);\n  pwm.writeMicroseconds(ch_, pulse_);\n}\n";
  return"servoset("+a+", "+b+");\n";
};

// Sensor Big
Blockly.Arduino.sensor_big={};
Blockly.Arduino.pms5003_t_read=function(){
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_pms5003T_init="#include <SoftwareSerial.h>";
  Blockly.Arduino.definitions_.define_pms_receive_inst="SoftwareSerial pms5003tSerial("+a+", "+b+");\nlong pmat10_ = 0;\nlong pmat25_ = 0;\nlong pmat100_ = 0;\nlong Temp_ = 0;\nlong Humid_ = 0;\nchar buf[50];\n";
  Blockly.Arduino.setups_["setup_pms5003_t_"]="pms5003tSerial.begin(9600);\n";
  Blockly.Arduino.definitions_.define_pms5003_t_read_="void retrievepm25(){\n  int count = 0;\n  unsigned char c;\n  unsigned char high;\n  while (pms5003tSerial.available()) {\n     c = pms5003tSerial.read();\n     if((count==0 && c!=0x42) || (count==1 && c!=0x4d)){\n       break;\n     }\n     if(count > 27){\n       break;\n     }\n      else if(count == 10 || count == 12 || count == 14 || count == 24 || count == 26) {\n       high = c;\n     }\n     else if(count == 11){\n       pmat10_ = 256*high + c;\n     }\n     else if(count == 13){\n       pmat25_ = 256*high + c;\n     }\n     else if(count == 15){\n       pmat100_ = 256*high + c;\n     }\n      else if(count == 25){\n          Temp_ = (256*high + c)/10;\n     }\n     else if(count == 27){\n                  Humid_ = (256*high + c)/10;\n    }       count++;\n  }  while(pms5003tSerial.available()) pms5003tSerial.read();\n}\n";
  return"retrievepm25();\n"
};

Blockly.Arduino.pms5003_t_read_sensor=function(){
  var a=this.getFieldValue("PMS_CHOOSE");
  if (a == "pms_read_PM1") {
    return["pmat10_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "pms_read_PM2"){
    return["pmat25_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "pms_read_PM10"){
    return["pmat100_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "pms_read_Temp"){
    return["Temp_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Humid_",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.sgp30_read=function(){
  Blockly.Arduino.definitions_.define_sgp30_init="#include \"SparkFun_SGP30_Arduino_Library.h\"\n#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_sgp30_inst2="SGP30 sgp30Sensor;;\n";
  Blockly.Arduino.setups_["setup_sgp30_"]="Wire.begin();\n  sgp30Sensor.begin();\n  sgp30Sensor.initAirQuality();\n";
  return"sgp30Sensor.measureAirQuality();\n"
};

Blockly.Arduino.sgp30_read_sensor=function(){
  var a=this.getFieldValue("SGP30_CHOOSE");
  if (a == "SGP30_TVOC") {
    return["sgp30Sensor.TVOC",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["sgp30Sensor.CO2",Blockly.Arduino.ORDER_ATOMIC];
  }
};


Blockly.Arduino.m5_mini_rfid=function() {
  Blockly.Arduino.definitions_.define_m5_mini_rfid_include="#include <Wire.h>\n#include \"MFRC522_I2C.h\"\n";
  Blockly.Arduino.definitions_.define_m5_mini_rfid_init="MFRC522 mfrc522(0x28);\n";
  Blockly.Arduino.definitions_.define_m5_mini_rfid_string="String readRFID() {\n  String mfrc522ReadCode = \"\";\n  if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() ) {}\n  else {\n    for (byte i = 0; i < mfrc522.uid.size; i++) {\n      mfrc522ReadCode += String(mfrc522.uid.uidByte[i], HEX);\n    }\n  }\n  return mfrc522ReadCode;\n}\n";
  Blockly.Arduino.setups_["m5_mini_rfid_init"]="Wire.begin();\n  mfrc522.PCD_Init();\n";
  return["readRFID()",Blockly.Arduino.ORDER_ATOMIC];
};

//-------------------------------------------------
Blockly.Arduino.module_neopixel_begin=function(){
  var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0",
		  b=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"",
	    c=this.getFieldValue("TX_PIN"),
			d= Blockly.Arduino.valueToCode(this,"LNUM",Blockly.Arduino.ORDER_ATOMIC)||"0";
	b = b.replace(/"/g,"");

  if (a < 0) {
    a = 0;
  }
  if (a > 255) {
    a = 255;
  }
  Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
  Blockly.Arduino.definitions_["define_neopixel_"+b]="Adafruit_NeoPixel "+b+" = Adafruit_NeoPixel("+d+", "+c+",NEO_GRB + NEO_KHZ800);\n";
  Blockly.Arduino.setups_["setup_neopixel_begin_"+b]=b+".begin();\n";
  Blockly.Arduino.setups_["setup_neopixel_brightness_"+b]=b+".setBrightness("+a+");\n";
  return""
};
Blockly.Arduino.module_neopixel_setpixelcolor=function(){
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("RGB"),
			c=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
	c = c.replace(/"/g,"");
  return c+".setPixelColor("+a+","+c+".Color("+hexToR(b)+","+hexToG(b)+","+hexToB(b)+"));\n"
};
Blockly.Arduino.module_neopixel_custom_setpixelcolor=function(){
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"R",Blockly.Arduino.ORDER_ATOMIC)||"255",
      c=Blockly.Arduino.valueToCode(this,"G",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"B",Blockly.Arduino.ORDER_ATOMIC)||"0",
			e=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
	e = e.replace(/"/g,"");
  return e+".setPixelColor("+a+", "+e+".Color("+b+","+c+","+d+"));\n"
};
Blockly.Arduino.module_neopixel_show=function(){
	var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
	a = a.replace(/"/g,"");
  return a+".show();\n"+a+".show();\n"
};

Blockly.Arduino.module_neopixel_clear=function(){
  var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
	a = a.replace(/"/g,"");
  return a+".clear();\n"+a+".show();\n"+a+".show();\n"
};

Blockly.Arduino.module_neopixel_setbrightness=function(){
  var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"",
	    b=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"30";
	a = a.replace(/"/g,"");
	return a+".setBrightness("+b+");\n"
};
//-------------------------------------------------

// HUSKYLENS
Blockly.Arduino.huskylens={};
Blockly.Arduino.huskylens_i2c_init=function() {
  Blockly.Arduino.definitions_.define_huskylens="#include \"HUSKYLENS.h\"";
  Blockly.Arduino.definitions_.define_huskylens_init="HUSKYLENS huskylens;";
  Blockly.Arduino.setups_["huskylens_init"]="Wire.begin();\n  while (!huskylens.begin(Wire)) {\n    Serial.println(F(\"Begin failed!\"));\n    Serial.println(F(\"1.Please recheck the \\\"Protocol Type\\\" in HUSKYLENS (General Settings>>Protocol Type>>I2C)\"));\n    Serial.println(F(\"2.Please recheck the connection.\"));\n    delay(100);\n  }\n";
  return"";
};

Blockly.Arduino.huskylens_uart_init=function() {
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_huskylens="#include \"HUSKYLENS.h\"\n#include \"SoftwareSerial.h\"\n";
  Blockly.Arduino.definitions_.define_huskylens_init="HUSKYLENS huskylens;\nSoftwareSerial mySerial("+a+", "+b+");\nvoid printResult(HUSKYLENSResult result);\n";
  Blockly.Arduino.setups_["huskylens_init"]="mySerial.begin(9600);\n  while (!huskylens.begin(mySerial)) {\n    Serial.println(F(\"Begin failed!\"));\n    Serial.println(F(\"1.Please recheck the \\\"Protocol Type\\\" in HUSKYLENS (General Settings>>Protocol Type>>Serial 9600)\"));\n    Serial.println(F(\"2.Please recheck the connection.\"));\n    delay(100);\n  }\n";
  return"";
};

Blockly.Arduino.huskylens_set_mode=function() {
  var a=this.getFieldValue("MODE_LIST");
  if (a == "FR") {
      return"huskylens.writeAlgorithm(ALGORITHM_FACE_RECOGNITION);\n";
  }
  else if (a == "OT") {
      return"huskylens.writeAlgorithm(ALGORITHM_OBJECT_TRACKING);\n";
  }
  else if (a == "OR") {
      return"huskylens.writeAlgorithm(ALGORITHM_OBJECT_RECOGNITION);\n";
  }
  else if (a == "LT") {
      return"huskylens.writeAlgorithm(ALGORITHM_LINE_TRACKING);\n";
  }
  else if (a == "CR") {
      return"huskylens.writeAlgorithm(ALGORITHM_COLOR_RECOGNITION);\n";
  }
  else if (a == "TR") {
      return"huskylens.writeAlgorithm(ALGORITHM_TAG_RECOGNITION);\n";
  }
  else {
      return"huskylens.writeAlgorithm(ALGORITHM_OBJECT_CLASSIFICATION);\n";
  }
};

Blockly.Arduino.huskylens_read_data=function() {
  Blockly.Arduino.definitions_.define_huskylens_init_array="int readData[5] = {};\nbyte dataType = 0;\nbyte idCount = 0;\nbool detection_now = 0;\n";
  return"if (!huskylens.request()) {\n  Serial.println(F(\"Fail to request data from HUSKYLENS, recheck the connection!\"));\n}\nelse {\n  if (huskylens.available()) {\n    detection_now = true;\n    HUSKYLENSResult result = huskylens.read();\n    idCount = huskylens.countLearned();\n    if (result.command == COMMAND_RETURN_BLOCK){\n      dataType = 0;\n      readData[0] = result.xCenter;\n      readData[1] = result.yCenter;\n      readData[2] = result.width;\n      readData[3] = result.height;\n      readData[4] = result.ID;\n    }\n    else if (result.command == COMMAND_RETURN_ARROW){\n      dataType = 1;\n      readData[0] = result.xOrigin;\n      readData[1] = result.yOrigin;\n      readData[2] = result.xTarget;\n      readData[3] = result.yTarget;\n      readData[4] = result.ID;\n    }\n    else {\n      for (byte i=0; i<5; i++) {\n        readData[i] = 0;\n      }\n    }\n  }\n  else {\n    detection_now = false;\n  }\n}\n";
};

Blockly.Arduino.huskylens_read_now=function() {
  return["detection_now",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.huskylens_get_data_block=function() {
  var a=this.getFieldValue("BLOCK_DATA");
  if (a == "XC") {
      return["readData[0]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YC") {
      return["readData[1]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "BW") {
      return["readData[2]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "BH") {
      return["readData[3]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["readData[4]",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.huskylens_get_data_arrow=function() {
  var a=this.getFieldValue("ARROW_DATA");
  if (a == "XO") {
      return["readData[0]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YO") {
      return["readData[1]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "XT") {
      return["readData[2]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YT") {
      return["readData[3]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["readData[4]",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.huskylens_show_text=function() {
  var a=Blockly.Arduino.valueToCode(this,"show_text",Blockly.Arduino.ORDER_ATOMIC)||"Text",
      b=Blockly.Arduino.valueToCode(this,"x_axis",Blockly.Arduino.ORDER_ATOMIC)||0,
      c=Blockly.Arduino.valueToCode(this,"y_axis",Blockly.Arduino.ORDER_ATOMIC)||0;
  return"huskylens.customText("+a+", "+b+", "+c+");\n";
};

Blockly.Arduino.huskylens_clear_screen=function() {
  return"huskylens.clearCustomText();\n";
};

Blockly.Arduino.huskylens_count_learned=function() {
  return["idCount",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.huskylens_count_all_learned=function() {
  return["huskylens.countLearnedIDs()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.huskylens_write_learn=function() {
  var a=Blockly.Arduino.valueToCode(this,"learn_id",Blockly.Arduino.ORDER_ATOMIC)||"1";
  return"huskylens.writeLearn("+a+");\n";
};

Blockly.Arduino.huskylens_write_forget=function() {
  return"huskylens.writeForget();\n";
};

Blockly.Arduino.huskylens_learned_id=function() {
  var a=Blockly.Arduino.valueToCode(this,"learned_id",Blockly.Arduino.ORDER_ATOMIC)||"1";
  return["huskylens.isLearned("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.huskylens_set_id_name=function() {
  var a=Blockly.Arduino.valueToCode(this,"set_id",Blockly.Arduino.ORDER_ATOMIC)||1,
      b=Blockly.Arduino.valueToCode(this,"set_name",Blockly.Arduino.ORDER_ATOMIC)||"Name";
  return"huskylens.setCustomName("+b+", "+a+");\n";
};

Blockly.Arduino.huskylens_save_picture_to_sd=function() {
  return"huskylens.savePictureToSDCard();\n";
};

Blockly.Arduino.huskylens_sl_model_to_sd=function() {
  var a=this.getFieldValue("MODEL_CHOOSE"),
      b=Blockly.Arduino.valueToCode(this,"choose_id",Blockly.Arduino.ORDER_ATOMIC)||1;
  if (a == "SAVE") {
      return"huskylens.saveModelToSDCard("+b+");\n";
  }
  else {
      return"huskylens.loadModelFromSDCard("+b+");\n";
  }
};

// PIXETTO
Blockly.Arduino.pixetto={};
Blockly.Arduino.pixetto_uart_init=function() {
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_pixetto="#include <SoftwareSerial.h>\n\n#define PXT_PACKET_START   0xFD\n#define PXT_PACKET_END    0xFE\n\n#define PXT_CMD_STREAMON  0x79\n#define PXT_CMD_STREAMOFF 0x7A\n#define PXT_CMD_ENABLEFUNC  0x7D\n#define PXT_CMD_DETMODE   0x7E\n\n#define PXT_RET_CAM_SUCCESS 0xE0\n#define PXT_RET_CAM_ERROR 0xE1\n\n#define PXT_RET_OBJNUM    0x46\n\n#define PXT_BUF_SIZE    40\n\n#define MAX_OPENCAM_ERROR   2\n#define MAX_HEX_ERROR     30\n\nenum EFunc {\n  FUNC_COLOR_DETECTION		        = 1,\n  FUNC_COLOR_CODE_DETECTION	        = 2,\n  FUNC_SHAPE_DETECTION		        = 3,\n  FUNC_SPHERE_DETECTION		        = 4,\n  FUNC_TEMPLATE_MATCHING		= 6,\n  FUNC_KEYPOINTS			= 8,\n  FUNC_NEURAL_NETWORK			= 9,\n  FUNC_APRILTAG				= 10,\n  FUNC_FACE_DETECTION			= 11,\n  FUNC_TRAFFIC_SIGN_DETECTION	        = 12,\n  FUNC_HANDWRITTEN_DIGITS_DETECTION	= 13,\n  FUNC_HANDWRITTEN_LETTERS_DETECTION	= 14,\n  FUNC_CLOUD_DETECTION		        = 15,\n  FUNC_LANES_DETECTION		        = 16,\n  FUNC_EQUATION_DETECTION		= 17,\n  FUNC_SIMPLE_CLASSIFIER		= 18,\n  FUNC_VOICE_COMMAND			= 19\n};\nenum EColor {\n  COLOR_RED      = 1,\n  COLOR_YELLOW   = 2,\n  COLOR_GREEN    = 3,\n  COLOR_BLUE     = 4,\n  COLOR_PURPLE   = 5,\n  COLOR_BLACK    = 6\n};\nenum EShape {\n  SHAPE_ROUND      = 1,\n  SHAPE_RECTANGLE  = 2,\n  SHAPE_TRIANGLE   = 3,\n  SHAPE_PENTAGON   = 4\n};\nenum ETrafficSign {\n  SIGN_NO_ENTRE               = 0,\n  SIGN_NO_LEFT_TURN           = 1,\n  SIGN_NO_RIGHT_TURN          = 2,\n  SIGN_WRONG_WAY              = 3,\n  SIGN_NO_U_TURN              = 4,\n  SIGN_MAX_SPEED              = 5,\n  SIGN_ONEWAY_TRAFFIC         = 6,\n  SIGN_LEFT_TURN              = 7,\n  SIGN_RIGHT_TURN             = 8,\n  SIGN_MIN_SPEED              = 9,\n  SIGN_U_TURN                 = 10,\n  SIGN_TUNNEL_AHEAD           = 11,\n  SIGN_BEWARE_OF_CHILDREN     = 12,\n  SIGN_ROUNDABOUT             = 13,\n  SIGN_YIELD_TO_PEDESTRIAN    = 14,\n  SIGN_RED_LIGHT              = 15,\n  SIGN_GREEN_LIGHT            = 16\n};\nenum ELetters {\n  LETTER_A  = 0,\n  LETTER_B  = 1,\n  LETTER_C  = 2,\n  LETTER_D  = 3,\n  LETTER_E  = 4,\n  LETTER_F  = 5,\n  LETTER_G  = 6,\n  LETTER_H  = 7,\n  LETTER_I  = 8,\n  LETTER_J  = 9,\n  LETTER_K  = 10,\n  LETTER_L  = 11,\n  LETTER_M  = 12,\n  LETTER_N  = 13,\n  LETTER_O  = 14,\n  LETTER_P  = 15,\n  LETTER_Q  = 16,\n  LETTER_R  = 17,\n  LETTER_S  = 18,\n  LETTER_T  = 19,\n  LETTER_U  = 20,\n  LETTER_V  = 21,\n  LETTER_W  = 22,\n  LETTER_X  = 23,\n  LETTER_Y  = 24,\n  LETTER_Z  = 25\n};\nenum EVoiceCommand {\n  VOICE_Hello         = 1,\n  VOICE_Thanks        = 2,\n  VOICE_Bye           = 3,\n  VOICE_WhatsThis     = 4,\n  VOICE_WhatTime      = 5,\n  VOICE_HowOld        = 6,\n  VOICE_WhatDay       = 7,\n  VOICE_TellStory     = 8,\n  VOICE_TellJoke      = 9,\n  VOICE_ReadPoem      = 10,\n  VOICE_TurnOnLight   = 11,\n  VOICE_TurnOffLight  = 12,\n  VOICE_TurnLeft      = 13,\n  VOICE_TurnRight     = 14,\n  VOICE_GoAhead       = 15,\n  VOICE_MoveBack      = 16,\n  VOICE_Stop          = 17,\n  VOICE_Open          = 18,\n  VOICE_Close         = 19,\n  VOICE_OpenEyes1     = 20,\n  VOICE_OpenEyes2     = 21,\n  VOICE_CloseEyes1    = 22,\n  VOICE_CloseEyes2    = 23,\n  VOICE_Jump          = 24,\n  VOICE_StandUp       = 25,\n  VOICE_SquatDown     = 26\n};\nenum EApriltagField {\n  APRILTAG_POS_X      = 1,\n  APRILTAG_POS_Y      = 2,\n  APRILTAG_POS_Z      = 3,\n  APRILTAG_ROT_X      = 4,\n  APRILTAG_ROT_Y      = 5,\n  APRILTAG_ROT_Z      = 6,\n  APRILTAG_CENTER_X   = 7,\n  APRILTAG_CENTER_Y   = 8\n};\nenum ELanesField {\n    LANES_LX1    = 1,\n    LANES_LY1    = 2,\n    LANES_LX2    = 3,\n    LANES_LY2    = 4,\n    LANES_RX1    = 5,\n    LANES_RY1    = 6,\n    LANES_RX2    = 7,\n    LANES_RY2    = 8\n};\nbool bEnableUVC = false;\nbool bDetMode = false;\nbool isCamOpened;\nbool bSendStreamOn;\nbool hasDelayed;\nint  nOpenCamFailCount;\nint  nHexErrCount;\nbool m_bDetModeDone;\nbool m_bFuncDone = false;\nint  m_nFuncID = 0;\nint m_id = 0;\nint m_type = 0;\nint m_x = 0;\nint m_y = 0;\nint m_h = 0;\nint m_w = 0;\nint m_objnum;\nfloat m_eqAnswer;\nint m_eqLen = 0;\nint m_dataLen = 0;\nunsigned long nTime4ObjNum = 0;\nfloat m_posx;\nfloat m_posy;\nfloat m_posz;\nint m_rotx;\nint m_roty;\nint m_rotz;\nint m_centerx;\nint m_centery;\nuint8_t m_inbuf[PXT_BUF_SIZE];\nint m_points[8];\nchar m_eqExpr[17];\n";
  Blockly.Arduino.definitions_.define_pixetto_init="SoftwareSerial myPixettoSerial("+a+", "+b+");\n";
  Blockly.Arduino.definitions_.define_pixetto_packages1="void begin() {\n  myPixettoSerial.begin(38400);\n  myPixettoSerial.setTimeout(50);\n  hasDelayed = false;\n  isCamOpened = false;\n  bSendStreamOn = false;\n  nOpenCamFailCount = 0;\n  nHexErrCount = 0;\n}\nvoid end() {\n  myPixettoSerial.end();\n}\nvoid clearDetectedData() {\n  m_id = 0; m_type = 0;\n  m_x = 0; m_y = 0; m_h = 0; m_w = 0;\n  m_eqAnswer = 0; m_eqLen = 0;\n  m_posx = 0.0; m_posy = 0.0; m_posz = 0.0; m_rotx = 0; m_roty = 0; m_rotz = 0;\n  m_centerx = 0; m_centery = 0;\n  memset(m_inbuf,  0, sizeof(m_inbuf));\n  memset(m_points, 0, sizeof(m_points));\n  memset(m_eqExpr, 0, sizeof(m_eqExpr));\n}\nint getFuncID() {\n	return m_id;\n}\nint getTypeID() {\n	return m_type;\n}\nint getPosX() {\n	return m_x;\n}\nint getPosY() {\n	return m_y;\n}\nint getH() {\n	return m_h;\n}\nint getW() {\n	return m_w;\n}\nint numObjects() {\n	if ((millis() - nTime4ObjNum) > 500)\n		m_objnum = 0;\n	return m_objnum;\n}\nvoid getEquationExpr(char *buf, int len) {\n	 strncpy(buf, m_eqExpr, m_eqLen);\n	 buf[m_eqLen] = '\\0';\n}\n";
  Blockly.Arduino.definitions_.define_pixetto_packages2="float getEquationAnswer() {\n	return m_eqAnswer;\n}\nvoid getApriltagInfo(float* px, float* py, float* pz, int* rx, int* ry, int* rz, int* cx, int* cy) {\n	if (!px || !py || !px || !rx || !ry || !rz || !cx || !cy)\n		return;\n	*px = m_posx;\n	*py = m_posy;\n	*pz = m_posz;\n	*rx = m_rotx;\n	*ry = m_roty;\n	*rz = m_rotz;\n	*cx = m_centerx;\n	*cy = m_centery;\n}\nfloat getApriltagField(EApriltagField field) {\n	switch(field) {\n		case APRILTAG_POS_X:\n			return m_posx;\n		case APRILTAG_POS_Y:\n			return m_posy;\n		case APRILTAG_POS_Z:\n			return m_posz;\n		case APRILTAG_ROT_X:\n			return m_rotx;\n		case APRILTAG_ROT_Y:\n			return m_roty;\n		case APRILTAG_ROT_Z:\n			return m_rotz;\n		case APRILTAG_CENTER_X:\n			return m_centerx;\n		case APRILTAG_CENTER_Y:\n			return m_centery;\n		default:\n			return 0;\n	}\n}\nvoid getLanePoints(int* lx1, int* ly1, int* lx2, int* ly2, int* rx1, int* ry1, int* rx2, int* ry2) {\n  if (!lx1 || !ly1 || !lx2 || !ly2 || !rx1 || !ry1 || !rx2 || !ry2)\n    return;\n  *lx1 = m_points[0];\n  *ly1 = m_points[1];\n  *lx2 = m_points[2];\n  *ly2 = m_points[3];\n  *rx1 = m_points[4];\n  *ry1 = m_points[5];\n  *rx2 = m_points[6];\n  *ry2 = m_points[7];\n}\nfloat getLanesField(ELanesField field) {\n	switch(field) {\n		case LANES_LX1:\n			return m_points[0];\n		case LANES_LY1:\n			return m_points[1];\n		case LANES_LX2:\n			return m_points[2];\n		case LANES_LY2:\n			return m_points[3];\n		case LANES_RX1:\n			return m_points[4];\n		case LANES_RY1:\n			return m_points[5];\n		case LANES_RX2:\n			return m_points[6];\n		case LANES_RY2:\n			return m_points[7];\n		default:\n			return 0;\n	}\n}\nvoid flush() {\n  while (myPixettoSerial.available() > 0)\n    char t = myPixettoSerial.read();\n}\nvoid calcDataChecksum(uint8_t *buf, int len) {\n  uint8_t sum = 0;\n  for (int i=1; i<len-2; i++)\n    sum += buf[i];\n  sum %= 256;\n  buf[len-2] = sum;\n}\nvoid sendQueryCommand() {\n  uint8_t SENSOR_CMD[] = {PXT_PACKET_START, 0x06, PXT_CMD_ENABLEFUNC, m_nFuncID, 0, PXT_PACKET_END};\n  calcDataChecksum(SENSOR_CMD, 6);\n  myPixettoSerial.write(SENSOR_CMD, sizeof(SENSOR_CMD)/sizeof(uint8_t));\n}\nvoid sendDetModeCommand() {\n  uint8_t SENSOR_CMD[] =  {PXT_PACKET_START, 0x06, PXT_CMD_DETMODE, bDetMode?1:0, 0, PXT_PACKET_END};\n  calcDataChecksum(SENSOR_CMD, 6);\n  myPixettoSerial.write(SENSOR_CMD, sizeof(SENSOR_CMD)/sizeof(uint8_t));\n}\n";
  Blockly.Arduino.definitions_.define_pixetto_packages3="void resetUboot() {\n  Serial.println(\"resetUboot\");\n  end();\n  delay(50);\n  myPixettoSerial.begin(115200);\n  myPixettoSerial.print(\"reset\\n\");\n  myPixettoSerial.print(\"reset\\n\");\n  myPixettoSerial.print(\"reset\\n\");\n  myPixettoSerial.flush();\n  delay(50);\n  flush();\n  myPixettoSerial.end();\n  delay(2000);\n  begin();\n}\nbool openCam() {\n  if (isCamOpened)\n    return true;\n  if (!hasDelayed) {\n    delay(3000);\n    hasDelayed = true;\n  }\n  else {\n    delay(1000);\n  }\n  if (nOpenCamFailCount > MAX_OPENCAM_ERROR) {\n    resetUboot();\n    bSendStreamOn = false;\n    nOpenCamFailCount = 0;\n    delay(2000);\n  }\n  if (!bSendStreamOn) {\n    flush();\n    uint8_t SENSOR_CMD[] =  {PXT_PACKET_START, 0x05, PXT_CMD_STREAMOFF, 0, PXT_PACKET_END};\n    calcDataChecksum(SENSOR_CMD, 5);\n    myPixettoSerial.write(SENSOR_CMD, sizeof(SENSOR_CMD)/sizeof(uint8_t));\n    delay(500);\n    flush();\n    SENSOR_CMD[2] = PXT_CMD_STREAMON;\n    calcDataChecksum(SENSOR_CMD, 5);\n    myPixettoSerial.write(SENSOR_CMD, sizeof(SENSOR_CMD)/sizeof(uint8_t));\n    bSendStreamOn = true;\n  }  if (myPixettoSerial.available() > 0) {\n    bSendStreamOn = false;\n    uint8_t buffer[10];\n    uint8_t input;\n    int i=0;\n    int nodata=0;\n    while ((input = myPixettoSerial.read()) != PXT_PACKET_START) {\n      if (input == 0xFF) {\n        nOpenCamFailCount++;\n        return false;\n      }\n      continue;\n    }\n    buffer[i++] = input;\n    while ((input = myPixettoSerial.read()) != PXT_PACKET_END) {\n      if (input == 0xFF) {\n        delay(1);\n        nodata++;\n        if (nodata > 10) {\n          nOpenCamFailCount++;\n          return false;\n        }\n        else\n          continue;\n      }\n      if (input == PXT_PACKET_START)\n        i = 0;\n      if (i >= 4) {\n        nOpenCamFailCount++;\n        return false;\n      }\n      buffer[i++] = input;\n      nodata = 0;\n    }\n    buffer[i] = input;\n    if (buffer[2] == PXT_RET_CAM_SUCCESS) {\n      isCamOpened = true;\n      if (!m_bDetModeDone) {\n        sendDetModeCommand();\n        m_bDetModeDone = true;\n      }\n      return true;\n    }\n    else {\n      nOpenCamFailCount++;\n    }\n  }\n  else {\n    nOpenCamFailCount++;\n  }\n  return false;\n}\n";

  Blockly.Arduino.definitions_.define_pixetto_packages4="bool verifyDataChecksum(uint8_t *buf, int len) {\n  uint8_t sum = 0;\n  for (uint8_t i=1; i<len-2; i++)\n    sum += buf[i];\n  sum %= 256;\n  return (sum == buf[len-2]);\n}\nvoid parse_Lanes(uint8_t *buf) {\n  m_x = buf[3];\n  m_y = buf[4];\n  for (int aa=0; aa<8; aa++)\n    m_points[aa] = buf[aa+5];\n}\nvoid parse_Equation(uint8_t *buf, int len) {\n  m_x = buf[3];\n  m_y = buf[4];\n  m_w = buf[5];\n  m_h = buf[6];\n  m_eqAnswer = 0;\n  for (int i=8; i<=14; i++)\n    m_eqAnswer = m_eqAnswer * 10 + buf[i];\n  m_eqAnswer /= 100;\n  if (buf[7] == 0) m_eqAnswer = 0 - m_eqAnswer;\n  memset(m_eqExpr, 0, sizeof(m_eqExpr));\n  m_eqLen = len - 17;\n  for (int aa=0; aa<m_eqLen; aa++)\n    m_eqExpr[aa] = (char)buf[aa+15];\n}\nvoid parse_Apriltag(uint8_t *buf) {\n  m_type = buf[3];\n  m_x = buf[4];\n  m_y = buf[5];\n  m_w = buf[6];\n  m_h = buf[7];\n  int value = 0;\n  value = (short)(buf[8] * 256 + buf[9]);\n  m_posx = (float)value / 100.0;\n  value = (short)(buf[10] * 256 + buf[11]);\n  m_posy = (float)value / 100.0;\n  value = (short)(buf[12] * 256 + buf[13]);\n  m_posz = (float)value / 100.0;\n  m_rotx = (short)(buf[14] * 256 + buf[15]);\n  m_roty = (short)(buf[16] * 256 + buf[17]);\n  m_rotz = (short)(buf[18] * 256 + buf[19]);\n  m_centerx = (short)(buf[20] * 256 + buf[21]);\n  m_centery = (short)(buf[22] * 256 + buf[23]);\n}\nvoid parse_SimpleClassifier(uint8_t *buf) {\n  m_type = buf[3] * 256 + buf[4];\n  m_x = buf[5];\n  m_y = buf[6];\n  m_w = buf[7];\n  m_h = buf[8];\n}\n";

  Blockly.Arduino.definitions_.define_pixetto_packages5="bool isDetected() {\n  if (bEnableUVC) {\n    sendDetModeCommand();\n  }\n  else {\n    bool ret = openCam();\n    if (!ret) {\n      return false;\n    }\n  }\n  if (!bDetMode && !m_bFuncDone) {\n    flush();\n    sendQueryCommand();\n    m_bFuncDone = true;\n  }\n  if (bDetMode == true) {\n    flush();\n    sendQueryCommand();\n  }\n  clearDetectedData();\n  if (readFromSerial()) {\n    m_id = m_inbuf[2];\n    if (m_id <= 0) {\n      return false;\n    }\n    if (m_id == FUNC_LANES_DETECTION) {\n			parse_Lanes(m_inbuf);\n			m_objnum = 1;\n		}\n		else if (m_id == FUNC_EQUATION_DETECTION) {\n		 	parse_Equation(m_inbuf, m_dataLen);\n		 	m_objnum = 1;\n		}\n		else if (m_id == FUNC_APRILTAG) {\n			parse_Apriltag(m_inbuf);\n		}\n		else if (m_id == FUNC_SIMPLE_CLASSIFIER) {\n			parse_SimpleClassifier(m_inbuf);\n		}\n		else {\n			m_type = m_inbuf[3];\n			if (m_id == PXT_RET_OBJNUM) {\n				if (m_type > 0) {\n				    m_objnum  = m_type;\n				    nTime4ObjNum = millis();\n				}\n				return isDetected();\n			}\n      m_x = m_inbuf[4];\n      m_y = m_inbuf[5];\n      m_w = m_inbuf[6];\n      m_h = m_inbuf[7];\n    }\n    return true;\n  }\n  else {\n    if (nHexErrCount > MAX_HEX_ERROR) {\n      nHexErrCount = 0;\n      resetUboot();\n    }\n    return false;\n  }\n  return false;\n}\n";

  Blockly.Arduino.definitions_.define_pixetto_packages6="bool readFromSerial() {\n  uint8_t tmpbuf[PXT_BUF_SIZE];\n  int readnum = 0;\n  if (bDetMode == true) {\n    int loop=0;\n    while (myPixettoSerial.available() <= 0 && loop < 100000) loop++;\n  }\n  delay(150);\n  if (myPixettoSerial.available() > 0) {\n    memset(tmpbuf, 0 ,sizeof(tmpbuf));\n    if ((readnum = myPixettoSerial.readBytes(tmpbuf, PXT_BUF_SIZE)) != 0) {\n    }\n  }\n  if (readnum == 0)\n    return false;\n  int i = 0;\n  while (i < readnum) {\n    if (tmpbuf[i] != PXT_PACKET_START) {\n      i++;\n      continue;\n    }\n    if (i == readnum - 1) {\n      nHexErrCount++;\n      return false;\n    }\n    int len = tmpbuf[i+1];\n    if (len < 0 || len > PXT_BUF_SIZE || len > readnum - i) {\n      nHexErrCount++;\n      return false;\n    }\n    memset(m_inbuf, 0, sizeof(m_inbuf));\n    memcpy(m_inbuf, tmpbuf+i, len);\n    if (verifyDataChecksum(m_inbuf, len)) {\n      nHexErrCount = 0;\n      m_dataLen = len;\n      if (m_inbuf[2] == PXT_RET_OBJNUM) {\n        if (m_inbuf[3] > 0) {\n            m_objnum  = m_inbuf[3];\n            nTime4ObjNum = millis();\n        }\n        i += m_dataLen;\n        continue;\n      }\n      return true;\n    }\n    else {\n      memset(m_inbuf, 0, sizeof(m_inbuf));\n      i++;\n    }\n  }\n    nHexErrCount++;\n  return false;\n}\n";

  Blockly.Arduino.setups_["pixetto_init"]="begin();\n";
  return"";
};

Blockly.Arduino.pixetto_mode_setting=function() {
  var a=this.getFieldValue("PIXETTO_MODE");
  Blockly.Arduino.setups_["pixetto_mode_setting"]="m_nFuncID = "+a+";\n";
  return"";
};

Blockly.Arduino.pixetto_is_detection=function() {
  return["isDetected()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_count_object=function() {
  return["numObjects()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_color_detects=function() {
  var a=this.getFieldValue("PIXETTO_COLOR");
  if (a == "PIXETTO_RED") {
      return["getFuncID() == FUNC_COLOR_DETECTION && getTypeID() == COLOR_RED",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_YELLOW") {
      return["getFuncID() == FUNC_COLOR_DETECTION && getTypeID() == COLOR_YELLOW",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_GREEN") {
      return["getFuncID() == FUNC_COLOR_DETECTION && getTypeID() == COLOR_GREEN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_BLUE") {
      return["getFuncID() == FUNC_COLOR_DETECTION && getTypeID() == COLOR_BLUE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_PURPLE"){
      return["getFuncID() == FUNC_COLOR_DETECTION && getTypeID() == COLOR_PURPLE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getFuncID() == FUNC_COLOR_DETECTION && getTypeID() == COLOR_BLACK",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_shape_detects=function() {
  var a=this.getFieldValue("PIXETTO_SHAPE");
  if (a == "PIXETTO_CIRCLE") {
      return["getFuncID() == FUNC_SHAPE_DETECTION && getTypeID() == SHAPE_ROUND",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_RECTANGLE") {
      return["getFuncID() == FUNC_SHAPE_DETECTION && getTypeID() == SHAPE_RECTANGLE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_TRIANGLE") {
      return["getFuncID() == FUNC_SHAPE_DETECTION && getTypeID() == SHAPE_TRIANGLE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getFuncID() == FUNC_SHAPE_DETECTION && getTypeID() == SHAPE_PENTAGON",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_sphere_detects=function() {
  var a=this.getFieldValue("PIXETTO_SPHERE");
  if (a == "PIXETTO_RED") {
      return["getFuncID() == FUNC_SPHERE_DETECTION && getTypeID() == COLOR_RED",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_YELLOW") {
      return["getFuncID() == FUNC_SPHERE_DETECTION && getTypeID() == COLOR_YELLOW",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_GREEN") {
      return["getFuncID() == FUNC_SPHERE_DETECTION && getTypeID() == COLOR_GREEN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_BLUE") {
      return["getFuncID() == FUNC_SPHERE_DETECTION && getTypeID() == COLOR_BLUE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_PURPLE"){
      return["getFuncID() == FUNC_SPHERE_DETECTION && getTypeID() == COLOR_PURPLE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getFuncID() == FUNC_SPHERE_DETECTION && getTypeID() == COLOR_BLACK",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_template_matching_detects=function() {
  var a=this.getFieldValue("PIXETTO_TEMPLATE");
  return["getFuncID() == FUNC_TEMPLATE_MATCHING && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_keypoint_detects=function() {
  var a=this.getFieldValue("PIXETTO_KEYPOINT");
  return["getFuncID() == FUNC_KEYPOINTS && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_neural_detects=function() {
  var a=Blockly.Arduino.valueToCode(this,"neural_count",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["getFuncID() == FUNC_NEURAL_NETWORK && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_traffic_detects=function() {
  var a=this.getFieldValue("PIXETTO_SIGN");
  if (a == "PIXETTO_SIGN_NO_ENTRE") {
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_NO_ENTRE",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_NO_LEFT_TURN") {
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_NO_LEFT_TURN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_NO_RIGHT_TURN") {
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_NO_RIGHT_TURN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_WRONG_WAY") {
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_WRONG_WAY",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_NO_U_TURN"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_NO_U_TURN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_MAX_SPEED"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_MAX_SPEED",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_ONEWAY_TRAFFIC"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_ONEWAY_TRAFFIC",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_LEFT_TURN"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_LEFT_TURN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_RIGHT_TURN"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_RIGHT_TURN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_MIN_SPEED"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_MIN_SPEED",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_U_TURN"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_U_TURN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_TUNNEL_AHEAD"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_TUNNEL_AHEAD",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_BEWARE_OF_CHILDREN"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_BEWARE_OF_CHILDREN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_ROUNDABOUT"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_ROUNDABOUT",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_YIELD_TO_PEDESTRIAN"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_YIELD_TO_PEDESTRIAN",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_SIGN_RED_LIGHT"){
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_RED_LIGHT",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getFuncID() == FUNC_TRAFFIC_SIGN_DETECTION && getTypeID() == SIGN_GREEN_LIGHT",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_apriltag_detects=function() {
  var a=this.getFieldValue("PIXETTO_APRILTAG");
  if (a == "PIXETTO_APRILTAG_TYPE") {
      return["getTypeID()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_POSX") {
      return["getApriltagField(APRILTAG_POS_X)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_POSY") {
      return["getApriltagField(APRILTAG_POS_Y)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_POSZ") {
      return["getApriltagField(APRILTAG_POS_Z)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_ROTX"){
      return["getApriltagField(APRILTAG_ROT_X)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_ROTY"){
      return["getApriltagField(APRILTAG_ROT_Y)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_ROTZ"){
      return["getApriltagField(APRILTAG_ROT_Z)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_APRILTAG_CENX"){
      return["getApriltagField(APRILTAG_CENTER_X)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getApriltagField(APRILTAG_CENTER_Y)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_lanes_detection=function() {
  var a=this.getFieldValue("PIXETTO_LANES_DETECTION");
  if (a == "PIXETTO_LANES_GX") {
      return["getPosX()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_GY") {
      return["getPosY()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_LX1") {
      return["getLanesField(LANES_LX1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_LY1") {
      return["getLanesField(LANES_LY1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_LX2") {
      return["getLanesField(LANES_LX2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_LY2") {
      return["getLanesField(LANES_LY2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_RX1"){
      return["getLanesField(LANES_RX1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_RY1"){
      return["getLanesField(LANES_RY1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_LANES_RX2"){
      return["getLanesField(LANES_RX2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getLanesField(LANES_RY2)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_object_detail=function() {
  var a=this.getFieldValue("PIXETTO_OBJECT_DETAIL");
  if (a == "PIXETTO_OBJECT_TYPE") {
      return["getTypeID();",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_OBJECT_X") {
      return["getPosX()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_OBJECT_Y") {
      return["getPosY()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PIXETTO_OBJECT_W") {
      return["getW()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["getH()",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.pixetto_handwritten_digits=function() {
  var a=this.getFieldValue("PIXETTO_HAND_DIGITS");
  return["getFuncID() == FUNC_HANDWRITTEN_DIGITS_DETECTION && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_handwritten_letters=function() {
  var a=this.getFieldValue("PIXETTO_HAND_LETTERS");
  return["getFuncID() == FUNC_HANDWRITTEN_LETTERS_DETECTION && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_remote_computing_detects=function() {
  var a=Blockly.Arduino.valueToCode(this,"computing_count",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["getFuncID() == FUNC_CLOUD_DETECTION && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_remote_classifier_detects=function() {
  var a=Blockly.Arduino.valueToCode(this,"classifier_count",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["getFuncID() == FUNC_SIMPLE_CLASSIFIER && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.pixetto_voice_command_detects=function() {
  var a=this.getFieldValue("PIXETTO_VOICE_DETECTS");
  return["getFuncID() == FUNC_VOICE_COMMAND && getTypeID() == "+a,Blockly.Arduino.ORDER_ATOMIC];
};

// EZ Start Kit Q
Blockly.Arduino.ez_start_kit_q={};
Blockly.Arduino.ez_start_kit_q_pca9685_init=function(){
  Blockly.Arduino.definitions_.define_pca9685_init="#include <Wire.h>";
  Blockly.Arduino.definitions_.define_pca9685_init2="#include <Adafruit_PWMServoDriver.h>";
  Blockly.Arduino.definitions_["define_pca9685_init3"]="Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();\n";
  Blockly.Arduino.definitions_["define_pca9685_init4"]="int servomin = 600;\nint servomax = 2400;\n";
  Blockly.Arduino.setups_["setup_pac9685_"]="pwm.begin();\n  pwm.setOscillatorFrequency(27000000);\n  pwm.setPWMFreq(50);\n  Wire.setClock(400000);\n";
  return""
};

Blockly.Arduino.ez_start_kit_q_motor=function(){
  var a=this.getFieldValue("MotorChoose"),
      b=Blockly.Arduino.valueToCode(this,"MOTOR",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_pwm_write="void pwmset(int ch_, int pwm_) {  \n  pwm_ = map(pwm_,0,255,0,4095);\n  pwm.setPWM(ch_, 0, (pwm_ + (4096/16)*0) % 4096 );\n}\n";
  if (a == "M1") {
    if (b >=0) {
        return"pwmset(12, "+b+");\npwmset(13, 0);\n";
    }
    else {
        return"pwmset(12, 0);\npwmset(13, abs("+b+"));\n";
    }
  }
  else if (a == "M2") {
    if (b >=0) {
        return"pwmset(14, "+b+");\npwmset(15, 0);\n";
    }
    else {
        return"pwmset(14, 0);\npwmset(15, abs("+b+"));\n";
    }
  }
  else if (a == "M3") {
    if (b >=0) {
        return"pwmset(8, "+b+");\npwmset(9, 0);\n";
    }
    else {
        return"pwmset(8, 0);\npwmset(9, abs("+b+"));\n";
    }
  }
  else if (a == "M4") {
    if (b >=0) {
        return"pwmset(10, "+b+");\npwmset(11, 0);\n";
    }
    else {
        return"pwmset(10, 0);\npwmset(11, abs("+b+"));\n";
    }
  }
};

Blockly.Arduino.ez_start_kit_q_servo_init=function(){
  var a=Blockly.Arduino.valueToCode(this,"pulse_min",Blockly.Arduino.ORDER_ATOMIC)||"600",
      b=Blockly.Arduino.valueToCode(this,"pulse_max",Blockly.Arduino.ORDER_ATOMIC)||"2400";
  Blockly.Arduino.definitions_["define_pca9685_init4"]="int servomin = "+a+";\nint servomax = "+b+";\n";
  return""
};

Blockly.Arduino.ez_start_kit_q_servo_write=function(){
  var a=this.getFieldValue("ServoChoose"),
      b=Blockly.Arduino.valueToCode(this,"Degree",Blockly.Arduino.ORDER_ATOMIC)||"180";
  Blockly.Arduino.definitions_.define_servo_write="void servoset(int ch_, int deg_) {\n  if (deg_ < 0)deg_ = 0;\n  if (deg_ > 180)deg_ = 180;\n  int pulse_ = map(deg_, 0, 180, servomin, servomax);\n  pwm.writeMicroseconds(ch_, pulse_);\n}\n";
  return"servoset("+a+"-1, "+b+");\n";
};

// apollo
Blockly.Arduino.apollo={};
Blockly.Arduino.apollo_factory=function(){
  Blockly.Arduino.definitions_['define_apollo_factory_']="#include <Wire.h>\n#include <Adafruit_PN532.h>\n\n#define PN532_IRQ   (3)\n#define PN532_RESET (12)  // Not connected by default on the NFC Shield\n\nAdafruit_PN532 nfc(PN532_IRQ, PN532_RESET);\n\n#include <Adafruit_NeoPixel.h>\n#define PIN 8\n#define NUMPIXELS 20\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n#define DELAYVAL 50\n\n#include <SPI.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n#define SCREEN_WIDTH 128 // OLED display width, in pixels\n#define SCREEN_HEIGHT 64 // OLED display height, in pixels\n// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)\n#define OLED_RESET     12 // Reset pin # (or -1 if sharing Arduino reset pin)\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);\n\nint gostart[32];\nbyte count = 0;\n\n// 'let's start!', 128x64px\nconst unsigned char myBitmap00 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0xf0, 0xfc, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x01, 0xfc, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x03, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x07, 0x0e, 0x60, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x07, 0xfe, 0x60, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x03, 0x00, 0x70, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0f, 0xf3, 0xfc, 0x3c, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0f, 0xf1, 0xf8, 0x3c, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x82, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0xc3, 0xe0, 0xdd, 0xf8, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f, 0xc7, 0xf0, 0xff, 0xf8, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x06, 0x00, 0x38, 0xe0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x06, 0x00, 0x18, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x86, 0x00, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x07, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0e, 0x18, 0xc0, 0xc0, 0x40, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0c, 0x18, 0xc0, 0xc0, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x87, 0x0c, 0x38, 0xc0, 0xe0, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x83, 0xcf, 0xf8, 0xc0, 0x78, 0xe0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xc7, 0x98, 0xc0, 0x78, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n\n// 'Forward', 128x64px\nconst unsigned char myBitmap01 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n// 'Left', 128x64px\nconst unsigned char myBitmap02 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n\n// 'Right', 128x64px\nconst unsigned char myBitmap03 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n// 'clean', 128x64px\nconst unsigned char myBitmap04 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x30, 0x00, 0x1f, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x78, 0x00, 0x1f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0xff, 0xf8, 0x1f, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1e, 0x3f, 0xff, 0xf8, 0x1c, 0x60, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x30, 0x00, 0x1c, 0xe0, 0xf3, 0xc0, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x78, 0x00, 0x1c, 0xe3, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x1c, 0xc7, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x1c, 0xdf, 0x80, 0x7c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x1d, 0xdf, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0x00, 0x1d, 0x8d, 0xff, 0xec, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0xff, 0xfc, 0x1d, 0xc1, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x3e, 0x7f, 0xff, 0xfc, 0x1d, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1c, 0xe0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x06, 0x1f, 0xff, 0xe0, 0x1c, 0x60, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x1c, 0x77, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x1c, 0x77, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x70, 0x1c, 0x70, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x06, 0x1f, 0xff, 0xf0, 0x1c, 0x70, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0xff, 0xf0, 0x1c, 0x71, 0x8c, 0x60, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0xff, 0xf0, 0x1f, 0xf1, 0xcc, 0xf0, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x0e, 0x18, 0x00, 0x70, 0x1d, 0xe3, 0x8c, 0x70, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x0e, 0x1f, 0xff, 0xf0, 0x1d, 0x87, 0x8c, 0x38, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x0e, 0x3f, 0xff, 0xf0, 0x1c, 0x07, 0x0c, 0x38, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x3f, 0xff, 0xf0, 0x1c, 0x0e, 0x0c, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x70, 0x1c, 0x1e, 0x0c, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x00, 0x70, 0x1c, 0x3c, 0x1c, 0x0e, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0xf0, 0x0f, 0xe0, 0x1c, 0x18, 0xfc, 0x0c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x0f, 0xe0, 0x1c, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x18, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n// 'start', 128x64px\nconst unsigned char myBitmap05 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x80, 0x7e, 0x0f, 0xc0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0xf8, 0x03, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x01, 0xf0, 0x01, 0xf0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0xf0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xe0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x00, 0xff, 0x83, 0x80, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0xff, 0x83, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0xff, 0x83, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0x83, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0x83, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0x83, 0xc0, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0x81, 0xe0, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x03, 0xe0, 0x03, 0x81, 0xf0, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 0x80, 0xf8, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xfc, 0x07, 0x80, 0x7c, 0x07, 0xc0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x80, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x1f, 0xff, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n// 'done', 128x64px\nconst unsigned char myBitmap06 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x7c, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0e, 0x1c, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xfe, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x0e, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xdc, 0x03, 0x80, 0x0e, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xdc, 0x03, 0x80, 0x0e, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x8e, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x86, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x86, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x03, 0x83, 0x87, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x81, 0x87, 0x70, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x81, 0x87, 0xf0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x03, 0x03, 0x87, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x03, 0x03, 0x83, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x07, 0x03, 0x83, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x07, 0x03, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x0c, 0x07, 0x03, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x78, 0x38, 0x0e, 0x07, 0x3f, 0x1f, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0xf0, 0x38, 0x0e, 0x06, 0x3f, 0x3d, 0xc7, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xe0, 0x38, 0x0e, 0x0e, 0x1c, 0x78, 0xe7, 0x07, 0xc0, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x0f, 0xc0, 0x3f, 0xfc, 0x0e, 0x00, 0xf0, 0xfe, 0x07, 0xc0, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0x80, 0x1f, 0xfc, 0x1c, 0x03, 0xe0, 0x7e, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1e, 0x00, 0x1f, 0xf8, 0x0c, 0x03, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n// 'back', 128x64px\nconst unsigned char myBitmap07 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x7c, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0e, 0x1c, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xfe, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x0e, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xdc, 0x03, 0x80, 0x0e, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xdc, 0x03, 0x80, 0x0e, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x8e, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x86, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x86, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x03, 0x83, 0x87, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x81, 0x87, 0x70, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x81, 0x87, 0xf0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x03, 0x03, 0x87, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x03, 0x03, 0x83, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x07, 0x03, 0x83, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x07, 0x03, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x0c, 0x07, 0x03, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x78, 0x38, 0x0e, 0x07, 0x3f, 0x1f, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0xf0, 0x38, 0x0e, 0x06, 0x3f, 0x3d, 0xc7, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xe0, 0x38, 0x0e, 0x0e, 0x1c, 0x78, 0xe7, 0x07, 0xc0, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x0f, 0xc0, 0x3f, 0xfc, 0x0e, 0x00, 0xf0, 0xfe, 0x07, 0xc0, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0x80, 0x1f, 0xfc, 0x1c, 0x03, 0xe0, 0x7e, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1e, 0x00, 0x1f, 0xf8, 0x0c, 0x03, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n// 'backward', 128x64px\nconst unsigned char myBitmap08 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\n// '↑', 12x12px\nconst unsigned char smallmap01 [] PROGMEM = {\n  0x00, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x1f, 0x80, 0x3f, 0xc0, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, \n  0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00\n};\n// '↓', 12x12px\nconst unsigned char smallmap02 [] PROGMEM = {\n  0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x3f, 0xc0, \n  0x1f, 0x80, 0x0f, 0x00, 0x06, 0x00, 0x00, 0x00\n};\n// '←', 12x12px\nconst unsigned char smallmap03 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x38, 0x00, 0x7f, 0xe0, 0x7f, 0xe0, 0x38, 0x00, \n  0x18, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n// '→', 12x12px\nconst unsigned char smallmap04 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x80, 0x01, 0xc0, 0x7f, 0xe0, 0x7f, 0xe0, 0x01, 0xc0, \n  0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n// 'S', 12x12px\nconst unsigned char smallmap05 [] PROGMEM = {\n  0x00, 0x00, 0x07, 0x80, 0x08, 0x80, 0x10, 0x00, 0x18, 0x00, 0x0f, 0x80, 0x00, 0x80, 0x00, 0x80, \n  0x10, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n// 'R', 12x12px\nconst unsigned char smallmap06 [] PROGMEM = {\n  0x00, 0x00, 0x1f, 0x00, 0x11, 0x80, 0x11, 0x80, 0x11, 0x80, 0x1f, 0x00, 0x12, 0x00, 0x11, 0x00, \n  0x10, 0x80, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00\n};\n// 'G', 12x12px\nconst unsigned char smallmap07 [] PROGMEM = {\n  0x00, 0x00, 0x07, 0x80, 0x18, 0xc0, 0x10, 0x00, 0x20, 0x00, 0x23, 0xc0, 0x20, 0xc0, 0x20, 0xc0, \n  0x10, 0xc0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00\n};\n// 'B', 12x12px\nconst unsigned char smallmap08 [] PROGMEM = {\n  0x00, 0x00, 0x1f, 0x00, 0x11, 0x80, 0x10, 0x80, 0x1f, 0x00, 0x13, 0x00, 0x10, 0x80, 0x10, 0x80, \n  0x11, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n// 'D', 12x12px\nconst unsigned char smallmap09 [] PROGMEM = {\n  0x00, 0x00, 0x1f, 0x00, 0x11, 0x80, 0x10, 0xc0, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, \n  0x11, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\nvoid myTone(byte pin, uint16_t frequency, uint16_t duration)\n{ // input parameters: Arduino pin number, frequency in Hz, duration in milliseconds\n  unsigned long startTime=millis();\n  unsigned long halfPeriod= 1000000L/frequency/2;\n  pinMode(pin,OUTPUT);\n  while (millis()-startTime< duration)\n  {\n    digitalWrite(pin,HIGH);\n    delayMicroseconds(halfPeriod);\n    digitalWrite(pin,LOW);\n    delayMicroseconds(halfPeriod);\n  }\n  pinMode(pin,INPUT);\n}\n\nvoid motor(byte MA1, byte MA2, byte MB1, byte MB2, byte gotime) {\n  analogWrite(5, MA1);\n  analogWrite(6, MA2);\n  analogWrite(9, MB1);\n  analogWrite(10, MB2);\n  delay(gotime);\n  analogWrite(5, 0);\n  analogWrite(6, 0);\n  analogWrite(9, 0);\n  analogWrite(10, 0);\n  delay(500);\n}\n\nvoid showoled() {\n  display.clearDisplay();\n  byte x = 0;\n  byte y = 0;\n  for (byte i=0; i<32; i++) {\n    if (gostart[i] == 1) {\n      display.drawBitmap(x, y, smallmap01, 12, 12, WHITE);\n    }\n    else if (gostart[i] == 2){\n      display.drawBitmap(x, y, smallmap03, 12, 12, WHITE);\n    }\n    else if (gostart[i] == 3){\n      display.drawBitmap(x, y, smallmap04, 12, 12, WHITE);\n    }\n    else if (gostart[i] == 4){\n      display.drawBitmap(x, y, smallmap02, 12, 12, WHITE); \n    }\n    else if (gostart[i] == 5){\n      display.drawBitmap(x, y, smallmap05, 12, 12, WHITE); \n    }\n    else if (gostart[i] == 6){\n      display.drawBitmap(x, y, smallmap06, 12, 12, WHITE); \n    }\n    else if (gostart[i] == 7){\n      display.drawBitmap(x, y, smallmap07, 12, 12, WHITE); \n    }\n    else if (gostart[i] == 8){\n      display.drawBitmap(x, y, smallmap08, 12, 12, WHITE); \n    }\n    else if (gostart[i] == 9){\n      display.drawBitmap(x, y, smallmap09, 12, 12, WHITE); \n    }\n\n    display.display();\n    x += 16;\n    if (x == 128) {\n      x = 0;\n      y += 16;\n    }\n  }\n}\n\nint free_ram() {\n  extern int __heap_start, *__brkval;\n  int v;\n  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);\n}\n\nString code_;";
  Blockly.Arduino.setups_["setup_apollo_factory_"]="Serial.begin(115200);\n  pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n  pinMode(11, OUTPUT);\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  display.~Adafruit_SSD1306();\n  display.clearDisplay();\n  display.drawBitmap(0, 0, myBitmap00, 128, 64, SSD1306_WHITE);\n  display.display(); // Show the display buffer on the screen\n  display.display();\n  nfc.begin();\n  nfc.SAMConfig();\n  Serial.println(\"Waiting for an ISO14443A Card ...\");\n  pixels.begin();\n  pixels.setBrightness(30);\n  pixels.clear();\n  for(byte i=0; i<NUMPIXELS; i++) {\n    pixels.setPixelColor(i, pixels.Color(0, 50, 0));\n    pixels.show();\n    delay(DELAYVAL);\n  }\n  pixels.show();\n  for (byte i=0; i<32; i++) {\n    gostart[i] = 0;\n  }\n  \n  Serial.println(free_ram());\n  while (1) {\n    uint8_t success;\n    uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n    uint8_t uidLength;\n  \n    success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n    uint8_t data[16];                         // Array to store block data during reads\n    uint8_t keyuniversal[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 5, 1, keyuniversal);\n    success = nfc.mifareclassic_ReadDataBlock(5, data);\n    if (success) {\n      //nfc.PrintHex(uid, uidLength);\n      if (uidLength == 4) {\n        myTone(11,1000, 100);\n        pixels.clear();\n        for(byte i=0; i<NUMPIXELS; i++) {\n          pixels.setPixelColor(i, pixels.Color(0, 100, 0));\n        }\n        pixels.show();\n        delay(100);\n        for(byte i=0; i<NUMPIXELS; i++) {\n          pixels.setPixelColor(i, pixels.Color(0, 50, 0));\n        }\n        pixels.show();\n        pixels.show();\n        /*\n        uint32_t cardid;\n        cardid = uid[0];\n        cardid <<= 8;\n        cardid |= uid[1];\n        cardid <<= 8;\n        cardid |= uid[2];\n        cardid <<= 8;\n        cardid |= uid[3];\n        Serial.println(String(cardid));\n        */\n  \n  \n        //nfc.PrintHexChar(data, 16);\n        uint32_t cardid;\n        cardid = data[0];\n        code_ = String(cardid, HEX);\n        Serial.println(String(cardid, HEX));\n  \n        //start\n        if (code_ == \"77\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(3);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(43,23);             // Start at top-left corner\n          display.println(F(\"GO!\"));\n          display.display(); // Show the display buffer on the screen\n          delay(1000);\n          display.clearDisplay();\n          display.display();\n  \n          for (byte i=0; i<32; i++) {\n            display.clearDisplay();\n            if (gostart[i] == 1) {\n              display.drawBitmap(0, 0, myBitmap01, 128, 64, SSD1306_WHITE);\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(50, 50, 0));\n              }\n              pixels.show();\n              pixels.show();\n              motor(150, 0, 150, 0, 500);\n            }\n            else if (gostart[i] == 2){\n              display.drawBitmap(0, 0, myBitmap02, 128, 64, SSD1306_WHITE);\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(50, 0, 50));\n              }\n              pixels.show();\n              pixels.show();\n              motor(150, 0, 0, 150, 500);\n            }\n            else if (gostart[i] == 3){\n              display.drawBitmap(0, 0, myBitmap03, 128, 64, SSD1306_WHITE);\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(0, 50, 50));\n              }\n              pixels.show();\n              pixels.show();\n              motor(0, 150, 150, 0, 500);\n            }\n            else if (gostart[i] == 4){\n              display.drawBitmap(0, 0, myBitmap08, 128, 64, SSD1306_WHITE);\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(70, 25, 70));\n              }\n              pixels.show();\n              pixels.show();\n              motor(0, 150, 0, 150, 500);\n            }\n            else if (gostart[i] == 5){\n              display.clearDisplay(); // Clear the display buffer\n              display.setTextSize(2);             // Normal 1:1 pixel scale\n              display.setTextColor(SSD1306_WHITE);        // Draw white text\n              display.setCursor(37,25);             // Start at top-left corner\n              display.println(F(\"Stop!\"));\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(50, 50, 50));\n              }\n              pixels.show();\n              pixels.show();\n              motor(0, 0, 0, 0, 500);\n            }\n            else if (gostart[i] == 6){\n              display.clearDisplay(); // Clear the display buffer\n              display.setTextSize(2);             // Normal 1:1 pixel scale\n              display.setTextColor(SSD1306_WHITE);        // Draw white text\n              display.setCursor(47,25);             // Start at top-left corner\n              display.println(F(\"Red\"));\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(50, 0, 0));\n              }\n              pixels.show();\n              pixels.show();\n              delay(1000);\n            }\n            else if (gostart[i] == 7){\n              display.clearDisplay(); // Clear the display buffer\n              display.setTextSize(2);             // Normal 1:1 pixel scale\n              display.setTextColor(SSD1306_WHITE);        // Draw white text\n              display.setCursor(35,25);             // Start at top-left corner\n              display.println(F(\"Green\"));\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(0, 50, 0));\n              }\n              pixels.show();\n              pixels.show();\n              delay(1000);\n            }\n            else if (gostart[i] == 8){\n              display.clearDisplay(); // Clear the display buffer\n              display.setTextSize(2);             // Normal 1:1 pixel scale\n              display.setTextColor(SSD1306_WHITE);        // Draw white text\n              display.setCursor(45,25);             // Start at top-left corner\n              display.println(F(\"Blue\"));\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(0, 0, 50));\n              }\n              pixels.show();\n              pixels.show();\n              delay(1000);\n            }\n            else if (gostart[i] == 9){\n              display.clearDisplay(); // Clear the display buffer\n              display.setTextSize(2);             // Normal 1:1 pixel scale\n              display.setTextColor(SSD1306_WHITE);        // Draw white text\n              display.setCursor(45,25);             // Start at top-left corner\n              display.println(F(\"Dark\"));\n              display.display(); // Show the display buffer on the screen\n              pixels.clear();\n              for(byte i=0; i<NUMPIXELS; i++) {\n                pixels.setPixelColor(i, pixels.Color(0, 0, 0));\n              }\n              pixels.show();\n              pixels.show();\n              delay(1000);\n            }\n          }\n          count = 0;\n          for (byte i=0; i<32; i++) {\n            gostart[i] = 0;\n          }\n          pixels.clear();\n          for(byte i=0; i<NUMPIXELS; i++) {\n            pixels.setPixelColor(i, pixels.Color(0, 50, 0));\n          }\n          pixels.show();\n          pixels.show();\n          display.clearDisplay(); // Clear the display buffer\n          display.drawBitmap(0, 0, myBitmap06, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          for (int i=0; i<3; i++) {\n            myTone(11,1000, 100);\n            delay(100);\n          }\n          Serial.println(\"done\");\n          delay(1000);\n          display.clearDisplay();\n          display.drawBitmap(0, 0, myBitmap00, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          display.display();\n          continue;\n        }\n        if (count > 31) {\n          for (int i=0; i<3; i++) {\n            myTone(11,1000, 100);\n            delay(100);\n          }\n          continue;\n        }\n        //forward\n        if (code_ == \"66\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.drawBitmap(0, 0, myBitmap01, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 1;\n          count += 1;\n        }\n        //left\n        else if (code_ == \"6c\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.drawBitmap(0, 0, myBitmap02, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 2;\n          count += 1;\n        }\n        //right\n        else if (code_ == \"72\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.drawBitmap(0, 0, myBitmap03, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 3;\n          count += 1;\n        }\n  \n        //backward\n        else if (code_ == \"61\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.drawBitmap(0, 0, myBitmap08, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 4;\n          count += 1;\n        }\n  \n        //stop\n        else if (code_ == \"73\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(37,25);             // Start at top-left corner\n          display.println(F(\"Stop!\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 5;\n          count += 1;\n        }\n  \n        //red\n        else if (code_ == \"68\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(47,25);             // Start at top-left corner\n          display.println(F(\"Red\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 6;\n          count += 1;\n        }\n        //green\n        else if (code_ == \"67\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(35,25);             // Start at top-left corner\n          display.println(F(\"Green\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 7;\n          count += 1;\n        }\n        //blue\n        else if (code_ == \"62\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(45,25);             // Start at top-left corner\n          display.println(F(\"Blue\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 8;\n          count += 1;\n        }\n        //black\n        else if (code_ == \"64\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(45,25);             // Start at top-left corner\n          display.println(F(\"Dark\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          gostart[count] = 9;\n          count += 1;\n        }\n  \n        //clean\n        else if (code_ == \"63\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.drawBitmap(0, 0, myBitmap04, 128, 64, SSD1306_WHITE);\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n          count -= 1;\n          if (count < 0) {\n            count = 0;\n          }\n          gostart[count] = 0;\n        }\n        showoled();\n        for (byte i=0; i<32; i++) {\n           Serial.print(gostart[i]);\n        }\n        Serial.println(\"\");\n      }\n    }\n  }";
  return""
};

Blockly.Arduino.apollo_factory_game=function(){
  var a=this.getFieldValue("blueChoose1"),
      b=this.getFieldValue("blueChoose2"),
      c=Blockly.Arduino.valueToCode(this,"board_rate",Blockly.Arduino.ORDER_ATOMIC)||9600,
      d=Blockly.Arduino.valueToCode(this,"white_r",Blockly.Arduino.ORDER_ATOMIC)||0,
      e=Blockly.Arduino.valueToCode(this,"white_g",Blockly.Arduino.ORDER_ATOMIC)||0,
      f=Blockly.Arduino.valueToCode(this,"white_b",Blockly.Arduino.ORDER_ATOMIC)||0,
      g=Blockly.Arduino.valueToCode(this,"white_range",Blockly.Arduino.ORDER_ATOMIC)||200;
  Blockly.Arduino.definitions_['define_apollo_factory_game_']="#include <Wire.h>\n#include <Adafruit_PN532.h>\n\n#define PN532_IRQ   (3)\n#define PN532_RESET (12)  // Not connected by default on the NFC Shield\n\nAdafruit_PN532 nfc(PN532_IRQ, PN532_RESET);\n\n#include <SPI.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n#define SCREEN_WIDTH 128 // OLED display width, in pixels\n#define SCREEN_HEIGHT 64 // OLED display height, in pixels\n// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)\n#define OLED_RESET     12 // Reset pin # (or -1 if sharing Arduino reset pin)\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);\n\n\n#include \"Adafruit_TCS34725.h\"\nAdafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);\nuint16_t r_, g_, b_, c_;\n\n#include <SoftwareSerial.h>\nSoftwareSerial mySerial("+a+", "+b+"); // RX, TX\n\nbyte ir_L = 1;\nbyte ir_R = 1;\nbyte sp = 100;\nString code_;\nint check_r = "+d+";\nint check_g = "+e+";\nint check_b = "+f+";\nint check_range = "+g+";\n\nvoid myTone(byte pin, uint16_t frequency, uint16_t duration) { // input parameters: Arduino pin number, frequency in Hz, duration in milliseconds\n  unsigned long startTime=millis();\n  unsigned long halfPeriod= 1000000L/frequency/2;\n  pinMode(pin,OUTPUT);\n  while (millis()-startTime< duration) {\n    digitalWrite(pin,HIGH);\n    delayMicroseconds(halfPeriod);\n    digitalWrite(pin,LOW);\n    delayMicroseconds(halfPeriod);\n  }\n  pinMode(pin,INPUT);\n}\n\nvoid motor(byte MA1, byte MA2, byte MB1, byte MB2) {\n  analogWrite(5, MA1);\n  analogWrite(6, MA2);\n  analogWrite(9, MB1);\n  analogWrite(10, MB2);\n}\n\nint free_ram() {\n  extern int __heap_start, *__brkval;\n  int v;\n  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);\n}\n\nvoid show_count(byte count) {\n  display.clearDisplay();\n  display.setTextColor(SSD1306_WHITE);\n  display.setTextSize(5);\n  display.setCursor(52, 15);\n  display.println(count);\n  display.display();\n}\n\nvoid one_line() {\n  byte blank = 0;\n  byte torch = 0;\n  byte direction = 1;\n  while (blank < 1) {\n    motor(sp, 0, sp, 0);\n    delay(200);\n    while (true) {\n      ir_L = digitalRead(14);\n      ir_R = digitalRead(15);\n      if (ir_L == 1 && ir_R == 1) {\n        motor(sp, 0, sp, 0);\n      }\n      else if (ir_L == 1 && ir_R == 0) {\n        motor(sp, 0, 0, sp);\n        direction = 1;\n      }\n      else if (ir_L == 0 && ir_R == 1) {\n        motor(0, sp, sp, 0);\n        direction = 2;\n      }\n      else {\n        motor(sp, sp, sp, sp);\n        delay(500);\n        if (direction == 1) {\n          if (torch == 0) {\n            for (int i=0; i<200; i++) {\n              motor(sp, 0, 0, sp);\n              ir_L = digitalRead(14);\n              ir_R = digitalRead(15);\n              if (ir_L == 1 && ir_R == 1) {\n                motor(sp, sp, sp, sp);\n                delay(100);\n                torch = 1;\n                break;\n              }\n              delay(1);\n            }\n          }\n          if (torch == 0) {\n            for (int i=0; i<400; i++) {\n              motor(0, sp, sp, 0);\n              ir_L = digitalRead(14);\n              ir_R = digitalRead(15);\n              if (ir_L == 1 && ir_R == 1) {\n                motor(sp, sp, sp, sp);\n                delay(100);\n                torch = 1;\n                break;\n              }\n              delay(1);\n            }\n          }\n          if (torch == 0) {\n            for (int i=0; i<200; i++) {\n              motor(sp, 0, 0, sp);\n              ir_L = digitalRead(14);\n              ir_R = digitalRead(15);\n              if (ir_L == 1 && ir_R == 1) {\n                motor(sp, sp, sp, sp);\n                delay(100);\n                torch = 1;\n                break;\n              }\n              delay(1);\n            }\n          }\n        }\n        else {\n          if (torch == 0) {\n            for (int i=0; i<200; i++) {\n              motor(0, sp, sp, 0);\n              ir_L = digitalRead(14);\n              ir_R = digitalRead(15);\n              if (ir_L == 1 && ir_R == 1) {\n                motor(sp, sp, sp, sp);\n                delay(100);\n                torch = 1;\n                break;\n              }\n              delay(1);\n            }\n          }\n          if (torch == 0) {\n            for (int i=0; i<400; i++) {\n              motor(sp, 0, 0, sp);\n              ir_L = digitalRead(14);\n              ir_R = digitalRead(15);\n              if (ir_L == 1 && ir_R == 1) {\n                motor(sp, sp, sp, sp);\n                delay(100);\n                torch = 1;\n                break;\n              }\n              delay(1);\n            }\n          }\n          if (torch == 0) {\n            for (int i=0; i<200; i++) {\n              motor(0, sp, sp, 0);\n              ir_L = digitalRead(14);\n              ir_R = digitalRead(15);\n              if (ir_L == 1 && ir_R == 1) {\n                motor(sp, sp, sp, sp);\n                delay(100);\n                torch = 1;\n                break;\n              }\n              delay(1);\n            }\n          }\n        }\n        if (torch == 0) {\n          blank += 1;\n        }\n        torch = 0;\n        break;\n      }\n    }\n  }\n  motor(sp, sp, sp, sp);\n  delay(500);\n}\n\nvoid checkColor(int red_, int green_, int blue_, int range_) {\n  byte color = 0;\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  /*\n  if (r_ > 200 && g_ > 200 && b_ > 200) {\n    color =  0;\n  }\n  else if (r_ > g_ && r_ > b_ && r_ < 200) {\n    color =  1;\n  }\n  else if (r_ > 200 && g_ > 200 && b_ < 150) {\n    color =  2;\n  }\n  else if (g_ > r_ && g_ > b_ && g_ < 200) {\n    color =  3;\n  }\n  else if (b_ > 250 && r_ < 200 && g_ < 200) {\n    color =  4;\n  }\n  else if (b_ > r_ && b_ > g_ && r_ < g_ && b_ < 200) {\n    color =  5;\n  }\n  else if (b_ > r_ && b_ > g_ && r_ > g_ && b_ < 200) {\n    color =  6;\n  }\n  */\n  if (abs(int(r_) - red_) < range_ && abs(int(g_) - green_) < range_ && abs(int(b_) - blue_) < range_) {\n    color = 0;\n  }\n  else {\n    color = 1;\n  }\n  //Serial.println(String(r_)+\", \"+String(g_)+\", \"+String(b_)+\", \"+String(color));\n  //Serial.println(String(abs(int(r_) - red_))+\", \"+String(abs(int(g_) - green_))+\", \"+String(abs(int(b_) - blue_))+\", \"+String(range_));\n  \n  if (color != 0) {\n    byte check = 0;\n    mySerial.println(\"k\");\n    unsigned long lastTime = millis();\n    while (true) {\n      int textCmd = mySerial.read();\n      if (textCmd == 108) {\n        check = 1;\n        display.clearDisplay();\n        display.setTextColor(SSD1306_WHITE);\n        display.setTextSize(5);\n        display.setCursor(52, 15);\n        display.println(\"?\");\n        display.display();\n        break;\n      }\n      if (millis() - lastTime > 500) {\n        break;\n      }\n\n    }\n    while (check == 1) {\n      //Serial.println(\"answer\");\n      int textCmd = mySerial.read();\n      if (textCmd == 111) {\n        break;\n      }\n      else if (textCmd == 112){\n        display.clearDisplay();\n        display.setTextColor(SSD1306_WHITE);\n        display.setTextSize(5);\n        display.setCursor(52, 15);\n        display.println(\"X\");\n        display.display();\n      }\n    }\n  }\n}\n\nconst unsigned char myBitmap00 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0xf0, 0xfc, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x01, 0xfc, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x03, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x07, 0x0e, 0x60, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x07, 0xfe, 0x60, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x03, 0x00, 0x70, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0f, 0xf3, 0xfc, 0x3c, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0f, 0xf1, 0xf8, 0x3c, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x82, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0xc3, 0xe0, 0xdd, 0xf8, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f, 0xc7, 0xf0, 0xff, 0xf8, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x06, 0x00, 0x38, 0xe0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x06, 0x00, 0x18, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x86, 0x00, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x07, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0e, 0x18, 0xc0, 0xc0, 0x40, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0c, 0x18, 0xc0, 0xc0, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x87, 0x0c, 0x38, 0xc0, 0xe0, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x83, 0xcf, 0xf8, 0xc0, 0x78, 0xe0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xc7, 0x98, 0xc0, 0x78, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};\n\nconst unsigned char myBitmap06 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x7c, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0e, 0x1c, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xfe, 0x07, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x0e, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xdc, 0x03, 0x80, 0x0e, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xdc, 0x03, 0x80, 0x0e, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x8e, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x86, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x86, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x03, 0x83, 0x87, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x81, 0x87, 0x70, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x81, 0x87, 0xf0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x03, 0x03, 0x87, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x03, 0x03, 0x83, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x07, 0x03, 0x83, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x07, 0x03, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x0c, 0x07, 0x03, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x78, 0x38, 0x0e, 0x07, 0x3f, 0x1f, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0xf0, 0x38, 0x0e, 0x06, 0x3f, 0x3d, 0xc7, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x01, 0xe0, 0x38, 0x0e, 0x0e, 0x1c, 0x78, 0xe7, 0x07, 0xc0, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x0f, 0xc0, 0x3f, 0xfc, 0x0e, 0x00, 0xf0, 0xfe, 0x07, 0xc0, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x3f, 0x80, 0x1f, 0xfc, 0x1c, 0x03, 0xe0, 0x7e, 0x03, 0x80, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x1e, 0x00, 0x1f, 0xf8, 0x0c, 0x03, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};";
  Blockly.Arduino.setups_['setup_apollo_factory_game_']="//Serial.begin(9600);\n  mySerial.begin("+c+");\n  tcs.begin();\n  pinMode(14, INPUT);\n  pinMode(15, INPUT);\n  pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n  pinMode(11, OUTPUT);\n  pinMode(13, OUTPUT);\n  digitalWrite(13, LOW);\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  display.~Adafruit_SSD1306();\n  display.clearDisplay();\n  display.drawBitmap(0, 0, myBitmap00, 128, 64, SSD1306_WHITE);\n  display.display(); // Show the display buffer on the screen\n  display.display();\n  nfc.begin();\n  nfc.SAMConfig();\n\n  //free_ram();\n  while (1) {\n    uint8_t success;\n    uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n    uint8_t uidLength;\n\n    success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n    uint8_t data[16];                         // Array to store block data during reads\n    uint8_t keyuniversal[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 5, 1, keyuniversal);\n    success = nfc.mifareclassic_ReadDataBlock(5, data);\n    if (success) {\n      //nfc.PrintHex(uid, uidLength);\n      if (uidLength == 4) {\n        myTone(11,1000, 100);\n\n        uint32_t cardid;\n        cardid = data[0];\n        code_ = String(cardid, HEX);\n        //Serial.println(String(cardid, HEX));\n\n        //start\n        if (code_ == \"77\") {\n          show_count(5);\n          delay(500);\n          for (byte i=0; i<5; i++) {\n            show_count(5-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n        //forward\n        if (code_ == \"66\") {\n          show_count(1);\n          delay(500);\n          for (byte i=0; i<1; i++) {\n            show_count(1-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n        //left\n        else if (code_ == \"6c\") {\n          show_count(2);\n          delay(500);\n          for (byte i=0; i<2; i++) {\n            show_count(2-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n        //right\n        else if (code_ == \"72\") {\n          show_count(3);\n          delay(500);\n          for (byte i=0; i<3; i++) {\n            show_count(3-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n\n        //backward\n        else if (code_ == \"61\") {\n          show_count(4);\n          delay(500);\n          for (byte i=0; i<4; i++) {\n            show_count(4-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n\n        //stop\n        else if (code_ == \"73\") {\n          show_count(6);\n          delay(500);\n          for (byte i=0; i<6; i++) {\n            show_count(6-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n\n        //red\n        else if (code_ == \"68\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(47,25);             // Start at top-left corner\n          display.println(F(\"Red\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n        }\n        //green\n        else if (code_ == \"67\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(35,25);             // Start at top-left corner\n          display.println(F(\"Green\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n        }\n        //blue\n        else if (code_ == \"62\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(45,25);             // Start at top-left corner\n          display.println(F(\"Blue\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n        }\n        //black\n        else if (code_ == \"64\") {\n          display.clearDisplay(); // Clear the display buffer\n          display.setTextSize(2);             // Normal 1:1 pixel scale\n          display.setTextColor(SSD1306_WHITE);        // Draw white text\n          display.setCursor(45,25);             // Start at top-left corner\n          display.println(F(\"Dark\"));\n          display.display(); // Show the display buffer on the screen\n          delay(300);\n        }\n\n        //clean\n        else if (code_ == \"63\") {\n          int rands = random(1, 7);\n          rands = random(1, 7);\n          rands = random(1, 7);\n          rands = random(1, 7);\n          for (byte i = 1; i<7; i++) {\n            show_count(i);\n            myTone(11,1000, 50);\n            delay(50);\n          }\n          for (byte i = 1; i<rands+1; i++) {\n            show_count(i);\n            myTone(11,1000, 50);\n            delay(50);\n          }\n          for (int i=0; i<2; i++) {\n            myTone(11,1000, 100);\n            delay(100);\n          }\n          delay(500);\n          for (byte i=0; i<rands; i++) {\n            show_count(rands-i);\n            one_line();\n            checkColor(check_r, check_g, check_b, check_range);\n          }\n        }\n        \n        display.clearDisplay(); // Clear the display buffer\n        display.drawBitmap(0, 0, myBitmap06, 128, 64, SSD1306_WHITE);\n        display.display(); // Show the display buffer on the screen\n        for (int i=0; i<3; i++) {\n          myTone(11,1000, 100);\n          delay(100);\n        }\n        //Serial.println(\"done\");\n        delay(1000);\n        display.clearDisplay();\n        display.drawBitmap(0, 0, myBitmap00, 128, 64, SSD1306_WHITE);\n        display.display(); // Show the display buffer on the screen\n        display.display();\n        continue;\n      }\n    }\n  }";
  return""
};

Blockly.Arduino.apollo_factory_remote=function(){
  var a=this.getFieldValue("blueChoose1"),
      b=this.getFieldValue("blueChoose2"),
      c=Blockly.Arduino.valueToCode(this,"board_rate",Blockly.Arduino.ORDER_ATOMIC)||9600;
  Blockly.Arduino.definitions_['define_apollo_factory_remote_']="#include <Wire.h>\n\n#include <SPI.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n#define SCREEN_WIDTH 128 // OLED display width, in pixels\n#define SCREEN_HEIGHT 64 // OLED display height, in pixels\n// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)\n#define OLED_RESET     12 // Reset pin # (or -1 if sharing Arduino reset pin)\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);\n\n#include <SoftwareSerial.h>\nSoftwareSerial mySerial("+a+", "+b+"); // RX, TX\n\n#include <Adafruit_NeoPixel.h>\n#define PIN 8\n#define NUMPIXELS 20\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n#define DELAYVAL 50\n\nbyte sp = 100;\n\nvoid myTone(byte pin, uint16_t frequency, uint16_t duration) { // input parameters: Arduino pin number, frequency in Hz, duration in milliseconds\n  unsigned long startTime=millis();\n  unsigned long halfPeriod= 1000000L/frequency/2;\n  pinMode(pin,OUTPUT);\n  while (millis()-startTime< duration) {\n    digitalWrite(pin,HIGH);\n    delayMicroseconds(halfPeriod);\n    digitalWrite(pin,LOW);\n    delayMicroseconds(halfPeriod);\n  }\n  pinMode(pin,INPUT);\n}\n\nvoid motor(byte MA1, byte MA2, byte MB1, byte MB2) {\n  analogWrite(5, MA1);\n  analogWrite(6, MA2);\n  analogWrite(9, MB1);\n  analogWrite(10, MB2);\n}\n\nint free_ram() {\n  extern int __heap_start, *__brkval;\n  int v;\n  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);\n}\n\nconst unsigned char myBitmap00 [] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x00, 0xf0, 0xfc, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x01, 0xfc, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x03, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x07, 0x0e, 0x60, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x07, 0xfe, 0x60, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0c, 0x03, 0x00, 0x70, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0f, 0xf3, 0xfc, 0x3c, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x0f, 0xf1, 0xf8, 0x3c, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x82, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0xc3, 0xe0, 0xdd, 0xf8, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f, 0xc7, 0xf0, 0xff, 0xf8, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x06, 0x00, 0x38, 0xe0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x06, 0x00, 0x18, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x86, 0x00, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x07, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0e, 0x18, 0xc0, 0xc0, 0x40, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0c, 0x18, 0xc0, 0xc0, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x87, 0x0c, 0x38, 0xc0, 0xe0, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x83, 0xcf, 0xf8, 0xc0, 0x78, 0xe0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xc7, 0x98, 0xc0, 0x78, 0xc0, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n};";
  Blockly.Arduino.setups_['setup_apollo_factory_remote_']="Serial.begin(9600);\n  mySerial.begin("+c+");\n  pinMode(14, INPUT);\n  pinMode(15, INPUT);\n  pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n  pinMode(11, OUTPUT);\n\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  display.~Adafruit_SSD1306();\n  display.clearDisplay();\n  display.drawBitmap(0, 0, myBitmap00, 128, 64, SSD1306_WHITE);\n  display.display(); // Show the display buffer on the screen\n  display.display();\n\n  pixels.begin();\n  pixels.setBrightness(30);\n  pixels.clear();\n  for(byte i=0; i<NUMPIXELS; i++) {\n    pixels.setPixelColor(i, pixels.Color(0, 50, 0));\n    pixels.show();\n    delay(DELAYVAL);\n  }\n  pixels.show();\n\n  free_ram();\n\n  while (1) {\n    if (mySerial.available()) {\n      int textCmd = mySerial.read();\n      Serial.println(textCmd);\n      if (textCmd == 101) {\n        motor(0, 0, sp, 0);\n      }\n      else if (textCmd == 119) {\n        motor(sp, 0, sp, 0);\n      }\n      else if (textCmd == 113) {\n        motor(sp, 0, 0, 0);\n      }\n      else if (textCmd == 100) {\n        motor(0, sp, sp, 0);\n      }\n      else if (textCmd == 97) {\n        motor(sp, 0, 0, sp);\n      }\n      else if (textCmd == 99) {\n        motor(0, 0, 0, sp);\n      }\n      else if (textCmd == 120) {\n        motor(0, sp, 0, sp);\n      }\n      else if (textCmd == 122) {\n        motor(0, sp, 0, 0);\n      }\n      else if (textCmd == 115) {\n        tone(11, 1000);\n      }\n      else if (textCmd == 98) {\n        noTone(11);\n        motor(0, 0, 0, 0);\n      }\n    }\n  }";
  return""
};

Blockly.Arduino.apollo_move_car=function(){
 var a=this.getFieldValue("STAT"),
     b=Blockly.Arduino.valueToCode(this,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"0";
 Blockly.Arduino.setups_["setup_mooncar_"]="pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n";

 if (a == "FORWARD") {
   return"analogWrite(5, "+b+");\nanalogWrite(6, 0);\nanalogWrite(9, "+b+");\nanalogWrite(10, 0);\n"
 } else if (a == "BACKWARD"){
   return"analogWrite(5, 0);\nanalogWrite(6, "+b+");\nanalogWrite(9, 0);\nanalogWrite(10, "+b+");\n"
 } else if (a == "LEFT") {
   return"analogWrite(5, "+b+");\nanalogWrite(6, 0);\nanalogWrite(9, 0);\nanalogWrite(10, "+b+");\n"
 } else if (a == "RIGHT") {
   return"analogWrite(5, 0);\nanalogWrite(6, "+b+");\nanalogWrite(9, "+b+");\nanalogWrite(10, 0);\n"
 } else {
   return"analogWrite(5, 0);\nanalogWrite(6, 0);\nanalogWrite(9, 0);\nanalogWrite(10, 0);\n"
 }
};
Blockly.Arduino.apollo_move_motor=function(){
 var a=Blockly.Arduino.valueToCode(this,"SPEED_L",Blockly.Arduino.ORDER_ATOMIC)||"0",
     b=Blockly.Arduino.valueToCode(this,"SPEED_R",Blockly.Arduino.ORDER_ATOMIC)||"0";
 Blockly.Arduino.definitions_.define_move_motor="void motor_LR(int ML, int MR)\n{\n  if (ML > 0) {\n    analogWrite(5, ML);\n    analogWrite(6, 0);\n  }else {\n    analogWrite(5, 0);\n    analogWrite(6, ML*(-1));\n  }\n  if (MR > 0) {\n    analogWrite(9, MR);\n    analogWrite(10, 0);\n  }else {\n    analogWrite(9, 0);\n    analogWrite(10, MR*(-1));\n  }\n}\n";
 Blockly.Arduino.setups_["setup_mooncar_"]="pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n";
 return"motor_LR("+b+", "+a+");\n";
};
Blockly.Arduino.apollo_tracker=function(){
 Blockly.Arduino.definitions_.define_tracker="int tracker()\n{\n  if (digitalRead(14) == 1 && digitalRead(15) == 1) {\n    return 0;\n  } else if (digitalRead(14) == 0 && digitalRead(15) == 1) {\n    return 2;\n  } else if (digitalRead(14) == 1 && digitalRead(15) == 0){\n    return 1;\n  } else {\n    return 3;\n  }\n}\n";
 Blockly.Arduino.setups_["setup_tracker_"]="pinMode(14, INPUT);\n  pinMode(15, INPUT);\n";
 return["tracker()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.apollo_sonar=function(){
 Blockly.Arduino.definitions_['define_sonar_']="#include <Ultrasonic.h>\n";
 Blockly.Arduino.definitions_['define_sonar_set']="Ultrasonic ultrasonic_(4, 7);"
 return ["ultrasonic_.convert(ultrasonic_.timing(), Ultrasonic::CM)", Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.apollo_button=function(){
 Blockly.Arduino.definitions_.define_apollo_button="bool pushbutton() {\n  if (digitalRead(16)) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n";
 Blockly.Arduino.setups_["setup_apollo_button_"]="pinMode(16, INPUT);\n";
 return ["pushbutton()", Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.apollo_init_tcs=function(){
 var a=Blockly.Arduino.valueToCode(this,"RANGE",Blockly.Arduino.ORDER_ATOMIC)||"5";
 Blockly.Arduino.definitions_.define_write="#include <Wire.h>";
 Blockly.Arduino.definitions_.define_tcs="#include \"Adafruit_TCS34725.h\"";
 Blockly.Arduino.definitions_.define_tcs_var="int now[3], rec_r[3], rec_g[3], rec_b[3], rec_y[3], rec_a[3], rec_p[3], rec_c1[3], rec_c2[3], rec_c3[3], range_ = "+a+";";
 Blockly.Arduino.definitions_["define_class_tcs_"]="Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);";
 Blockly.Arduino.definitions_["define_class_tcs_init"]="uint16_t r_, g_, b_, c_;";
 Blockly.Arduino.definitions_.define_tcs_red="int tcs_read_red()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return r_;\n}\n";
 Blockly.Arduino.definitions_.define_tcs_green="int tcs_read_green()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return g_;\n}\n";
 Blockly.Arduino.definitions_.define_tcs_blue="int tcs_read_blue()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return b_;\n}\n";
 Blockly.Arduino.setups_["tcs_"]||(Blockly.Arduino.setups_["tcs_"]="tcs.begin();\n  pinMode(13, OUTPUT);\n");
 return"digitalWrite(13, LOW);\n";
};
Blockly.Arduino.apollo_read_tcs=function(){
 var a=this.getFieldValue("TCS");
 if (a == "RED") {
   return["tcs_read_red()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "GREEN") {
   return["tcs_read_green()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else {
   return["tcs_read_blue()",Blockly.Arduino.ORDER_ATOMIC];
 }
};
Blockly.Arduino.apollo_flash_light=function(){
 var a=this.getFieldValue("TCS_LIGHT");
 if (a == "ON") {
   return"digitalWrite(13, LOW);\n";
 }
 else {
   return"digitalWrite(13, HIGH);\n";
 }
};
Blockly.Arduino.apollo_record_tcs=function(){
 var a=this.getFieldValue("RECORD_TCS");
 if (a == "RED") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_r[0] = r_;\nrec_r[1] = g_;\nrec_r[2] = b_;\n";
 }
 else if (a == "GREEN") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_g[0] = r_;\nrec_g[1] = g_;\nrec_g[2] = b_;\n";
 }
 else if (a == "BLUE") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_b[0] = r_;\nrec_b[1] = g_;\nrec_b[2] = b_;\n";
 }
 else if (a == "YELLO") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_y[0] = r_;\nrec_y[1] = g_;\nrec_y[2] = b_;\n";
 }
 else if (a == "AZURE") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_a[0] = r_;\nrec_a[1] = g_;\nrec_a[2] = b_;\n";
 }
 else if (a == "PURPLE") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_p[0] = r_;\nrec_p[1] = g_;\nrec_p[2] = b_;\n";
 }
 else if (a == "C1") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c1[0] = r_;\nrec_c1[1] = g_;\nrec_c1[2] = b_;\n";
 }
 else if (a == "C2") {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c2[0] = r_;\nrec_c2[1] = g_;\nrec_c2[2] = b_;\n";
 }
 else {
   return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c3[0] = r_;\nrec_c3[1] = g_;\nrec_c3[2] = b_;\n";
 }
};
Blockly.Arduino.apollo_chack_tcs=function(){
 var a=this.getFieldValue("RECORD_TCS");
 if (a == "RED") {
   Blockly.Arduino.definitions_.define_color_1="int tcs_check_1()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_r[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_1()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "GREEN") {
   Blockly.Arduino.definitions_.define_color_2="int tcs_check_2()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_g[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_2()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "BLUE") {
   Blockly.Arduino.definitions_.define_color_3="int tcs_check_3()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_b[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_3()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "YELLO") {
   Blockly.Arduino.definitions_.define_color_4="int tcs_check_4()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_y[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_4()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "AZURE") {
   Blockly.Arduino.definitions_.define_color_5="int tcs_check_5()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_a[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_5()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "PURPLE") {
   Blockly.Arduino.definitions_.define_color_6="int tcs_check_6()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_p[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_6()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "C1") {
   Blockly.Arduino.definitions_.define_color_7="int tcs_check_7()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c1[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_7()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else if (a == "C2") {
   Blockly.Arduino.definitions_.define_color_8="int tcs_check_8()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c2[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_8()",Blockly.Arduino.ORDER_ATOMIC];
 }
 else {
   Blockly.Arduino.definitions_.define_color_9="int tcs_check_9()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c3[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
   return["tcs_check_9()",Blockly.Arduino.ORDER_ATOMIC];
 }
};

Blockly.Arduino.apollo_neopixel_begin=function(){
 var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
 if (a < 0) {
   a = 0;
 }
 if (a > 255) {
   a = 255;
 }
 Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
 Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(20, 8,NEO_GRB + NEO_KHZ800);\n";
 Blockly.Arduino.setups_.setup_neopixel_begin="pixels.begin();\n";
 Blockly.Arduino.setups_.setup_neopixel_brightness="pixels.setBrightness("+a+");\n";
 return""
};

Blockly.Arduino.apollo_oled_display_setting=function(){
 Blockly.Arduino.definitions_.define_wire='#include <Wire.h>\n#include <SPI.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n';
 Blockly.Arduino.definitions_.define_u8g2_oled_declare='#define SCREEN_WIDTH 128\n#define SCREEN_HEIGHT 64\n#define OLED_RESET     12\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);\n';
 Blockly.Arduino.setups_.setup_define_u8g2_oled='display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  //display.~Adafruit_SSD1306();\n  display.setTextColor(SSD1306_WHITE);\n  display.setTextSize(2);\n';
 return""
};

Blockly.Arduino.apollo_oled_display_clear=function(){
 return'display.clearDisplay();\n'
};

Blockly.Arduino.apollo_oled_display_show=function(){
 return'display.display();\n'
};

Blockly.Arduino.apollo_oled_display_draw_commands=function(){
 var a=Blockly.Arduino.valueToCode(this,"x_axis",Blockly.Arduino.ORDER_ATOMIC)||0,
     b=Blockly.Arduino.valueToCode(this,"y_axis",Blockly.Arduino.ORDER_ATOMIC)||0,
     c=Blockly.Arduino.valueToCode(this,"show_text",Blockly.Arduino.ORDER_ATOMIC)||"Text";
 return'display.setCursor('+a+', '+b+');\ndisplay.println('+c+');\n';
};
Blockly.Arduino.apollo_oled_display_set_font=function(){
 var a=Blockly.Arduino.valueToCode(this,"RANGE",Blockly.Arduino.ORDER_ATOMIC)||"2";
 return'display.setTextSize('+a+');\n'
};

Blockly.Arduino.apollo_oled_display_set_album2=function(){
 var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"",
     b=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
 a=a.replace(/"/g,"");
 b=b.replace(/"/g,"");
 Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album1_"+a]="const unsigned char "+a+"[] PROGMEM= {"+b+"};\n";
 return""
};

Blockly.Arduino.apollo_oled_display_show_album2=function(){
 var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
 a=a.replace(/"/g,"");
 return'display.clearDisplay();\ndisplay.drawBitmap(0, 0, '+a+', 128, 64, SSD1306_WHITE);\ndisplay.display();\n';
};

Blockly.Arduino.apollo_face_show=function(){
 var a=this.getFieldValue("SIGN_SHOW");
 //Blockly.Arduino.definitions_.define_irremote="#include <U8g2lib.h>";
 //Blockly.Arduino.definitions_.define_irremote_init="U8G2_SSD1306_128X64_NONAME_F_HW_I2C  u8g2(U8G2_R0 , 2);";
 //Blockly.Arduino.setups_["face_"]||(Blockly.Arduino.setups_["face_"]="u8g2.begin();");
 if (a == "F1") {
   Blockly.Arduino.definitions_.define_face_f1="const unsigned char F1[] PROGMEM= {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xf0, 0xfc, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0xfc, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x0c, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x07, 0x0e, 0x60, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x07, 0xfe, 0x60, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x60, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x70, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf3, 0xfc, 0x3c, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf1, 0xf8, 0x3c, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x82, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0xc3, 0xe0, 0xdd, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f, 0xc7, 0xf0, 0xff, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x06, 0x00, 0x38, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x06, 0x00, 0x18, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x86, 0x00, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x07, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0e, 0x18, 0xc0, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x0c, 0x18, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x87, 0x0c, 0x38, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x83, 0xcf, 0xf8, 0xc0, 0x78, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xc7, 0x98, 0xc0, 0x78, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F1, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 } else if (a == "F2"){
   Blockly.Arduino.definitions_.define_face_f2="const unsigned char F2[] PROGMEM= {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F2, 128, 64, SSD1306_WHITE);\n  display.display();\n';

 } else if (a == "F3"){
   Blockly.Arduino.definitions_.define_face_f3="const unsigned char F3[] PROGMEM= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F3, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 } else if (a == "F4"){
   Blockly.Arduino.definitions_.define_face_f4="const unsigned char F4[] PROGMEM= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F4, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 } else if (a == "F5"){
   Blockly.Arduino.definitions_.define_face_f5="const unsigned char F5[] PROGMEM= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x30, 0x0, 0x1f, 0xe0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x0, 0x78, 0x0, 0x1f, 0xe0, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x3f, 0xff, 0xf8, 0x1f, 0xe0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x3f, 0xff, 0xf8, 0x1c, 0x60, 0x7f, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x30, 0x0, 0x1c, 0xe0, 0xf3, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x78, 0x0, 0x1c, 0xe3, 0xe1, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xf0, 0x1c, 0xc7, 0x80, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xf0, 0x1c, 0xdf, 0x80, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x1d, 0xdf, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x78, 0x0, 0x1d, 0x8d, 0xff, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7c, 0x7f, 0xff, 0xfc, 0x1d, 0xc1, 0xff, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x7f, 0xff, 0xfc, 0x1d, 0xc0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x1c, 0xe0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x1f, 0xff, 0xe0, 0x1c, 0x60, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xf0, 0x1c, 0x77, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xf0, 0x1c, 0x77, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x70, 0x1c, 0x70, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x1f, 0xff, 0xf0, 0x1c, 0x70, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x1f, 0xff, 0xf0, 0x1c, 0x71, 0x8c, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x1f, 0xff, 0xf0, 0x1f, 0xf1, 0xcc, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x18, 0x0, 0x70, 0x1d, 0xe3, 0x8c, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x1f, 0xff, 0xf0, 0x1d, 0x87, 0x8c, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x3f, 0xff, 0xf0, 0x1c, 0x7, 0xc, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x3f, 0xff, 0xf0, 0x1c, 0xe, 0xc, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x70, 0x1c, 0x1e, 0xc, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x70, 0x0, 0x70, 0x1c, 0x3c, 0x1c, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0xf0, 0xf, 0xe0, 0x1c, 0x18, 0xfc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xe0, 0xf, 0xe0, 0x1c, 0x0, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x18, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F5, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 } else if (a == "F6"){
   Blockly.Arduino.definitions_.define_face_f6="const unsigned char F6[] PROGMEM= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x3, 0x80, 0x7e, 0xf, 0xc0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf0, 0x0, 0x0, 0xf8, 0x3, 0xe0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x0, 0x1, 0xf0, 0x1, 0xf0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x0, 0x1, 0xe0, 0x0, 0xf0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x0, 0x3, 0xe0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x0, 0x3, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x0, 0x3, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x0, 0x3, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x0, 0x3, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0xff, 0x83, 0x80, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0xff, 0x83, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0xff, 0x83, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x3, 0x83, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x3, 0x83, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x80, 0x3, 0x83, 0xc0, 0x0, 0x78, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x3, 0x81, 0xe0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x3, 0x81, 0xf0, 0x1, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf0, 0x3, 0x80, 0xf8, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfc, 0x7, 0x80, 0x7c, 0x7, 0xc0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x80, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0x80, 0x1f, 0xff, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xfe, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F6, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 } else if (a == "F7"){
   Blockly.Arduino.definitions_.define_face_f7="const unsigned char F7[] PROGMEM= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 0x0, 0x0, 0x0, 0xe, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x0, 0x0, 0x0, 0xe, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x0, 0x0, 0xe, 0x7c, 0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xfc, 0x0, 0x0, 0xe, 0x1c, 0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xfc, 0x0, 0x0, 0xe, 0x0, 0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xfc, 0x3, 0xff, 0xff, 0xfe, 0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x1c, 0x3, 0xff, 0xff, 0xfe, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x1c, 0x3, 0xff, 0xff, 0xfe, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x1c, 0x3, 0x80, 0xe, 0x0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0xff, 0xff, 0xdc, 0x3, 0x80, 0xe, 0x0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0xff, 0xff, 0xdc, 0x3, 0x80, 0xe, 0x1c, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x8e, 0x1c, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x86, 0x1c, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0x86, 0x38, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xfc, 0x3, 0x83, 0x87, 0x38, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xfe, 0x3, 0x81, 0x87, 0x70, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xfe, 0x3, 0x81, 0x87, 0xf0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x3, 0x3, 0x87, 0xe0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x3, 0x3, 0x83, 0xc0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x7, 0x3, 0x83, 0xc0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x7, 0x3, 0x87, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0xc, 0x7, 0x3, 0x87, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x38, 0xe, 0x7, 0x3f, 0x1f, 0xc7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x38, 0xe, 0x6, 0x3f, 0x3d, 0xc7, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x38, 0xe, 0xe, 0x1c, 0x78, 0xe7, 0x7, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xc0, 0x3f, 0xfc, 0xe, 0x0, 0xf0, 0xfe, 0x7, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x80, 0x1f, 0xfc, 0x1c, 0x3, 0xe0, 0x7e, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x1f, 0xf8, 0xc, 0x3, 0xc0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F7, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 } else {
   Blockly.Arduino.definitions_.define_face_f8="const unsigned char F8[] PROGMEM= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};"
   return'display.clearDisplay();\n  display.drawBitmap(0, 0, F8, 128, 64, SSD1306_WHITE);\n  display.display();\n';
 }
};
Blockly.Arduino.apollo_rfid_set=function(){
 Blockly.Arduino.definitions_.define_NFC_RFID="#include <Wire.h>\n#include <Adafruit_PN532.h>\n#define PN532_IRQ   (3)\n#define PN532_RESET (12)\nAdafruit_PN532 nfc(PN532_IRQ, PN532_RESET);\n";
 Blockly.Arduino.setups_.setup_define_NFC_RFID="nfc.begin();\n  nfc.SAMConfig();\n";
 return""
};

Blockly.Arduino.apollo_rfid_read=function(){
 Blockly.Arduino.definitions_.define_read_RFID="String read_RFID() {\n uint8_t success;\n uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n uint8_t uidLength;\n success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success) {\n    if (uidLength == 4) {\n      uint32_t cardid;\n       cardid = uid[0];\n       cardid <<= 8;\n       cardid |= uid[1];\n       cardid <<= 8;\n       cardid |= uid[2];\n       cardid <<= 8;\n       cardid |= uid[3];\n       return String(cardid, HEX);\n     } \n   }else {\n      return \"Error\";\n  }\n}\n";
 return["read_RFID()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.apollo_custom_tone=function(){
 var a=Blockly.Arduino.valueToCode(this,"FREQ",Blockly.Arduino.ORDER_ATOMIC)||0,
     b=Blockly.Arduino.valueToCode(this,"DURATION",Blockly.Arduino.ORDER_ATOMIC)||0;
 return"tone(11, "+a+", "+b+");\n"
};

Blockly.Arduino.apollo_tone=function(){
 var a=this.getFieldValue("FREQ");
 return"tone(11, "+a+");\n"
};

Blockly.Arduino.apollo_no_tone=function(){
 return"noTone(11);\n"
};

Blockly.Arduino.apollo_bt_set=function(){
 var a=Blockly.Arduino.valueToCode(this,"tx_pins",Blockly.Arduino.ORDER_ATOMIC)||4,
     b=Blockly.Arduino.valueToCode(this,"rx_pins",Blockly.Arduino.ORDER_ATOMIC)||7,
     c=Blockly.Arduino.valueToCode(this,"board_rate",Blockly.Arduino.ORDER_ATOMIC)||9600;
 Blockly.Arduino.definitions_.define_bluetooth='#include <SoftwareSerial.h>\nSoftwareSerial mySerial('+a+', '+b+'); // RX, TX\n';
 Blockly.Arduino.setups_.setup_define_NFC_RFID='mySerial.begin('+c+');\n';
 return""
};

Blockly.Arduino.apollo_bt_able=function(){
 return["mySerial.available()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.apollo_bt_readString=function(){
 return["mySerial.read()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.apollo_bt_sendString=function(){
 var a=Blockly.Arduino.valueToCode(this,"show_text",Blockly.Arduino.ORDER_ATOMIC)||"";
 return"mySerial.println("+a+");"
};


// AM7020
Blockly.Arduino.am7020 = {};
// AM7020 Init
Blockly.Arduino.am7020_init = function () {
    var baudrate = this.getFieldValue("BAUDRATE");
    var resetPin = this.getFieldValue("RESET_PIN");

    Blockly.Arduino.definitions_.include_TinyGsmClientSIM7020 = "#include \"TinyGsmClientSIM7020.h\"";
    Blockly.Arduino.definitions_.typedef_TinyGsmSim7020 = "typedef TinyGsmSim7020 TinyGsm;";
    Blockly.Arduino.definitions_.typedef_GsmClientSim7020 = "typedef TinyGsmSim7020::GsmClientSim7020 TinyGsmClient;\n";
    Blockly.Arduino.definitions_.object_modem = "TinyGsm       modem(Serial1, " + resetPin + ");";
    Blockly.Arduino.setups_.setup_serialAT = "Serial1.begin(" + baudrate + ");\n";
    Blockly.Arduino.setups_.setup_randomSeed = "randomSeed(analogRead(16));\n";
    return ""
};
// AM7020 Connect BS
Blockly.Arduino.am7020_connect = function () {
    var apn = this.getFieldValue("APN");
    var band = 28;
    if (apn == "twm.nbiot" || apn == "iot4ga2") {
        band = 28;
    } else if (apn == "internet.iot") {
        band = 8;
    }
    Blockly.Arduino.definitions_.func_nbConnect = "\nvoid nbConnect(void)\n{\n    Serial.println(F(\"Initializing modem...\"));\n    while (!modem.init() || !modem.nbiotConnect(\"" + apn + "\", " + band + ")) {\n        Serial.print(F(\".\"));\n    }\n\n    Serial.print(F(\"Waiting for network...\"));\n    while (!modem.waitForNetwork()) {\n        Serial.print(F(\".\"));\n    }\n    Serial.println(F(\" success\"));\n}\n";
    return "nbConnect();\n";
};
// AM7020 Check NBIOT Connected
Blockly.Arduino.am7020_connected = function () {
    return ["modem.isNetworkConnected()", Blockly.Arduino.ORDER_ATOMIC];
};
// AM7020 NBIOT Reconnect
Blockly.Arduino.am7020_reconnect = function () {
    return "nbConnect();\n";
};
/* AM7020 MQTT */
// AM7020 MQTT Connect
Blockly.Arduino.am7020_connect_mqtt = function () {
    var broker = (Blockly.Arduino.valueToCode(this, "BROKER", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");
    var port = (Blockly.Arduino.valueToCode(this, "PORT", Blockly.Arduino.ORDER_ATOMIC) || "0").replace(/"/g, "");
    var id = (Blockly.Arduino.valueToCode(this, "ID", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");
    var username = (Blockly.Arduino.valueToCode(this, "USERNAME", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");
    var password = (Blockly.Arduino.valueToCode(this, "PASSWORD", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");
    var keepAlive = (Blockly.Arduino.valueToCode(this, "KEEPALIVE", Blockly.Arduino.ORDER_ATOMIC) || "270").replace(/"/g, "");

    Blockly.Arduino.definitions_.include_PubSubClient = "#include <Am7020PubSubClient.h>";

    Blockly.Arduino.definitions_.const_broker = "const char* broker = \"" + broker + "\";";
    Blockly.Arduino.definitions_.const_port = "const int port = " + port + ";";
    Blockly.Arduino.definitions_.const_mqtt_id = "const char* mqtt_id = \"" + id + "\";";
    Blockly.Arduino.definitions_.const_username = "const char* mqtt_username = \"" + username + "\";";
    Blockly.Arduino.definitions_.const_password = "const char* mqtt_password = \"" + password + "\";\n";

    Blockly.Arduino.definitions_.topic_buff = "String topic_buff;\n";
    Blockly.Arduino.definitions_.msg_buff = "String msg_buff;\n";
    Blockly.Arduino.setups_.set_topic_buff_size = "topic_buff.reserve(100);\n";
    Blockly.Arduino.setups_.set_msg_buff_size = "msg_buff.reserve(100);\n";

    Blockly.Arduino.definitions_.object_tcpClient = "TinyGsmClient tcpClient(modem);";
    Blockly.Arduino.definitions_.object_mqttClient = "Am7020PubSubClient  mqttClient(broker, port, tcpClient);";

    Blockly.Arduino.definitions_.func_mqttConnect = "\nvoid mqttConnect(void)\n{\n    Serial.print(F(\"Connecting to \"));\n    Serial.print(broker);\n    Serial.print(F(\"...\"));\n\n    while (!mqttClient.connect(mqtt_id, mqtt_username, mqtt_password)) {\n        Serial.print(F(\" fail\"));\n    }\n    Serial.println(F(\" success\"));\n}\n";
    Blockly.Arduino.setups_.setup_setMqttCallback = "mqttClient.setCallback(mqttCallback);\n";
    Blockly.Arduino.setups_.setup_setKeepAlive = "mqttClient.setKeepAlive(" + keepAlive + ");\n";
    return "mqttConnect();\n";
};
// AM7020 MQTT Subscribe
Blockly.Arduino.am7020_subscribe_mqtt = function () {
    var topic = (Blockly.Arduino.valueToCode(this, "TOPIC", Blockly.Arduino.ORDER_ATOMIC) || "");
    return "mqttClient.subscribe(String(" + topic + ").c_str());\n";
};
// AM7020 MQTT Publish
Blockly.Arduino.am7020_publish_mqtt = function () {
    var topic = (Blockly.Arduino.valueToCode(this, "TOPIC", Blockly.Arduino.ORDER_ATOMIC) || "");
    var msg = (Blockly.Arduino.valueToCode(this, "MESSAGE", Blockly.Arduino.ORDER_ATOMIC) || "");
    return "mqttClient.publish(String(" + topic + ").c_str(), String(" + msg + ").c_str());\n";
};
// AM7020 MQTT Received Topic
Blockly.Arduino.am7020_mqtt_received_topic = function () {
    return ["topic_buff", Blockly.Arduino.ORDER_ATOMIC];
};
// AM7020 MQTT Received Msg
Blockly.Arduino.am7020_mqtt_received_msg = function () {
    return ["msg_buff", Blockly.Arduino.ORDER_ATOMIC];
};
// AM7020 MQTT Event
Blockly.Arduino.am7020_mqtt_event = function () {
    Blockly.Arduino.definitions_.func_mqttCallback = "\nvoid mqttCallback(char *topic, byte *payload, unsigned int len)\n{\n    topic_buff = String(topic);\n    msg_buff = \"\";\n\n    for (int ii = 0;ii < (int)len;ii++) {\n        msg_buff += (char)(*(payload + ii));\n    }\n    Serial.print(F(\"Message arrived [\"));\n    Serial.print(topic_buff);\n    Serial.print(F(\"]: \"));\n    Serial.println(msg_buff);\n\n";
    Blockly.Arduino.definitions_.func_mqttCallback += Blockly.Arduino.statementToCode(this, "MSG_TOPIC_EQAL");
    Blockly.Arduino.definitions_.func_mqttCallback += "\n}\n";
    return ""
};
// AM7020 MQTT Connected
Blockly.Arduino.am7020_mqtt_connected = function () {
    return ['mqttClient.connected()', Blockly.Arduino.ORDER_ATOMIC];
};
// AM7020 MQTT Reconnect
Blockly.Arduino.am7020_mqtt_reconnect = function () {
    return "mqttConnect();\n";
};
// AM7020 MQTT handle
Blockly.Arduino.am7020_mqtt_handle = function () {
    return "mqttClient.loop();\n";
};

// adafruitio uses linkit7697 wifi
Blockly.Arduino.adafruitio_connect = function () {
    var username = (Blockly.Arduino.valueToCode(this, "USERNAME", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");
    var aiokey = (Blockly.Arduino.valueToCode(this, "AIOKEY", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");
    var deviceId = (Blockly.Arduino.valueToCode(this, "DEVICEID", Blockly.Arduino.ORDER_ATOMIC) || "").replace(/"/g, "");

    Blockly.Arduino.definitions_.include_PubSubClient = "#include <PubSubClient.h>";

    Blockly.Arduino.definitions_.const_mqtt_id = "const char* mqtt_id = \"" + deviceId + "\";";
    Blockly.Arduino.definitions_.const_username = "const char* mqtt_username = \"" + username + "\";";
    Blockly.Arduino.definitions_.const_password = "const char* mqtt_password = \"" + aiokey + "\";\n";

    Blockly.Arduino.definitions_.topic_buff = "String topic_buff;\n";
    Blockly.Arduino.definitions_.msg_buff = "String msg_buff;\n";
    Blockly.Arduino.setups_.set_topic_buff_size = "topic_buff.reserve(100);\n";
    Blockly.Arduino.setups_.set_msg_buff_size = "msg_buff.reserve(100);\n";

    Blockly.Arduino.adafruitio_connect_body_temp = "";
    Blockly.Arduino.adafruitio_callback_body_temp = "";

    Blockly.Arduino.definitions_.adafruitio_object_tcpClient = "WiFiClient tcpClient;";
    Blockly.Arduino.definitions_.adafruitio_object_mqttClient = "PubSubClient  mqttClient(\"io.adafruit.com\", 1883, tcpClient);";

    Blockly.Arduino.setups_.setup_setAdafruitioCallback = "mqttClient.setCallback(mqttCallback);\n";
    return "adafruitio_connect();\n";
  };

  Blockly.Arduino.adafruitio_handle = function () {
    return "mqttClient.loop();\n";
  };

  Blockly.Arduino.adafruitio_update_sensor = function () {
    var sensor_id = Blockly.Arduino.valueToCode(this, "SENSOR_ID", Blockly.Arduino.ORDER_ATOMIC) || "";
    var data = Blockly.Arduino.valueToCode(this, "SET_VALUE", Blockly.Arduino.ORDER_ATOMIC) || "";
    return "mqttClient.publish((String(mqtt_username)+\"/feeds/\"+String(mqtt_id)+\".\"+String("+sensor_id+")).c_str(), String("+data+").c_str());\n";
  };

  Blockly.Arduino.adafruitio_event = function () {
    var code = Blockly.Arduino.statementToCode(this, "CONTENT");
    var sensor_id = Blockly.Arduino.valueToCode(this, "SENSOR_ID", Blockly.Arduino.ORDER_ATOMIC) || "";

    Blockly.Arduino.adafruitio_connect_body_temp += "  mqttClient.subscribe((String(mqtt_username)+\"/feeds/\"+String(mqtt_id)+\".\"+String(" + sensor_id + ")).c_str());\n";

    Blockly.Arduino.definitions_.adafruitio_connect_body =  '\nvoid adafruitio_connect(){\n  while (!mqttClient.connected()){\n    if (!mqttClient.connect(mqtt_id,mqtt_username,mqtt_password))\n    {\n      delay(5000);\n    }\n  }\n';
    Blockly.Arduino.definitions_.adafruitio_connect_body += Blockly.Arduino.adafruitio_connect_body_temp;
    Blockly.Arduino.definitions_.adafruitio_connect_body += '\n}\n';

    Blockly.Arduino.adafruitio_callback_body_temp += "  if(topic_buff.equals((String(mqtt_username)+\"/feeds/\"+String(mqtt_id)+\".\"+String(" + sensor_id + ")))) {\n  " + code + "  }\n";

    Blockly.Arduino.definitions_.adafruitio_callback_body =  '\nvoid mqttCallback(char* topic, byte* payload, unsigned int length){\n  topic_buff=String(topic);\n  msg_buff="";\n  for (unsigned int myIndex = 0; myIndex < length; myIndex++)\n  {\n      msg_buff += (char)payload[myIndex];\n  }\n  msg_buff.trim();\n';
    Blockly.Arduino.definitions_.adafruitio_callback_body += Blockly.Arduino.adafruitio_callback_body_temp;
    Blockly.Arduino.definitions_.adafruitio_callback_body += '\n}\n';
    return "";
};

Blockly.Arduino.adafruitio_received_msg = function () {
    return ["msg_buff", Blockly.Arduino.ORDER_ATOMIC];
};
